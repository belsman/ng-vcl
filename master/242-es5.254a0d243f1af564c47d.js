!function(){"use strict";function e(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function n(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}(self.webpackChunkng_vcl=self.webpackChunkng_vcl||[]).push([[242],{8242:function(r,t,s){s.r(t),s.d(t,{BreakpointsDemoModule:function(){return k},demo:function(){return h}});var o,i=s(16274),p=s(95454),a=s(62518),c=s(46906),b=s(88561),m=s(84271),l=s(15104),u=(0,b.U)(function(e){return e.matches}),v=((o=function(){function r(n){e(this,r),this.breakpointObserver=n}var t,s,o;return t=r,(s=[{key:"ngOnInit",value:function(){this.xs$=this.breakpointObserver.observe(c.uCr.xs).pipe(u),this.sm$=this.breakpointObserver.observe(c.uCr.sm).pipe(u),this.md$=this.breakpointObserver.observe(c.uCr.md).pipe(u),this.lg$=this.breakpointObserver.observe(c.uCr.lg).pipe(u),this.xl$=this.breakpointObserver.observe(c.uCr.xl).pipe(u),this.xs_sm$=this.breakpointObserver.observe([c.uCr.xs,c.uCr.sm]).pipe(u)}}])&&n(t.prototype,s),o&&n(t,o),r}()).\u0275fac=function(e){return new(e||o)(m.Y36(l.Yg))},o.\u0275cmp=m.Xpm({type:o,selectors:[["ng-component"]],decls:18,vars:18,template:function(e,n){1&e&&(m.TgZ(0,"pre"),m._uU(1),m.ALo(2,"async"),m.qZA(),m.TgZ(3,"pre"),m._uU(4),m.ALo(5,"async"),m.qZA(),m.TgZ(6,"pre"),m._uU(7),m.ALo(8,"async"),m.qZA(),m.TgZ(9,"pre"),m._uU(10),m.ALo(11,"async"),m.qZA(),m.TgZ(12,"pre"),m._uU(13),m.ALo(14,"async"),m.qZA(),m.TgZ(15,"pre"),m._uU(16),m.ALo(17,"async"),m.qZA()),2&e&&(m.xp6(1),m.hij("xs: ",m.lcZ(2,6,n.xs$),""),m.xp6(3),m.hij("sm: ",m.lcZ(5,8,n.sm$),""),m.xp6(3),m.hij("md: ",m.lcZ(8,10,n.md$),""),m.xp6(3),m.hij("lg: ",m.lcZ(11,12,n.lg$),""),m.xp6(3),m.hij("xl: ",m.lcZ(14,14,n.xl$),""),m.xp6(3),m.hij("xs_sm: ",m.lcZ(17,16,n.xs_sm$),""))},pipes:[i.Ov],encapsulation:2}),o);function h(){return{label:"Breakpoints",tabs:{Demo:v,"README.md":{type:"md",content:"# Breakpoints\n\nVCL Breakpoint queries to be used with `@angular/cdk`'s BreakpointObserver or `window.matchMedia()`\n\n### Usage\n\n```ts\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nexport class MyComponent implements OnInit {\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n  ) {}\n\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs_sm$ = this.breakpointObserver.observe([VCLBreakpoints.xs, VCLBreakpoints.sm]).pipe(\n      map(state => state.matches)\n    );\n  }\n}\n\n```\n"},"demo.component.html":{type:"html",content:s(39088)},"demo.component.ts":{type:"ts",content:s(11917)}}}}var k=function(){var n=function n(){e(this,n)};return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=m.oAB({type:n}),n.\u0275inj=m.cJS({imports:[[i.ez,a.l,p.Bz.forChild([{path:"",component:a.z,data:{demo:h}}])]]}),n}()},39088:function(e,n,r){r.r(n),n.default="<pre>xs: {{xs$ | async}}</pre>\n<pre>sm: {{sm$ | async}}</pre>\n<pre>md: {{md$ | async}}</pre>\n<pre>lg: {{lg$ | async}}</pre>\n<pre>xl: {{xl$ | async}}</pre>\n<pre>xs_sm: {{xs_sm$ | async}}</pre>\n"},11917:function(e,n,r){r.r(n),n.default="import { Component } from '@angular/core';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { map } from 'rxjs/operators';\n\nconst pickMatches = map((state: BreakpointState) => state.matches);\n\n@Component({\n  templateUrl: 'demo.component.html'\n})\nexport class BreakpointsDemoComponent {\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n  ) {}\n\n  xs$: Observable<boolean>;\n  sm$: Observable<boolean>;\n  md$: Observable<boolean>;\n  lg$: Observable<boolean>;\n  xl$: Observable<boolean>;\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs$ = this.breakpointObserver.observe(VCLBreakpoints.xs).pipe(pickMatches);\n    this.sm$ = this.breakpointObserver.observe(VCLBreakpoints.sm).pipe(pickMatches);\n    this.md$ = this.breakpointObserver.observe(VCLBreakpoints.md).pipe(pickMatches);\n    this.lg$ = this.breakpointObserver.observe(VCLBreakpoints.lg).pipe(pickMatches);\n    this.xl$ = this.breakpointObserver.observe(VCLBreakpoints.xl).pipe(pickMatches);\n    this.xs_sm$ = this.breakpointObserver.observe([VCLBreakpoints.xs, VCLBreakpoints.sm]).pipe(pickMatches);\n  }\n}\n"}}])}();