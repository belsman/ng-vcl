"use strict";(self.webpackChunkng_vcl=self.webpackChunkng_vcl||[]).push([[250],{26250:function(e,n,t){t.r(n),t.d(n,{TokenDemoModule:function(){return d},demo:function(){return p}});var o=t(16274),l=t(24988),a=t(95454),c=t(46906),s=t(62518),v=t(84271),u=t(11896),r=t(48261),k=t(55761);const i=function(){return[1]};let m=(()=>{class e{onRemove(e){console.log("onRemove",e)}onListChange(e){console.log("onListChange",e)}onInputChange(e){console.log("onInputChange",e)}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=v.Xpm({type:e,selectors:[["ng-component"]],decls:33,vars:14,consts:[[3,"selected"],[3,"removable","remove"],[3,"value","valueChange"],[3,"value"],[3,"value","selectable","removable","valueChange"],[3,"valueChange"],[3,"disabled"]],template:function(e,n){1&e&&(v.TgZ(0,"h3"),v._uU(1,"single tokens"),v.qZA(),v.TgZ(2,"vcl-token"),v._uU(3,"my token"),v.qZA(),v.TgZ(4,"vcl-token",0),v._uU(5,"my selected token"),v.qZA(),v.TgZ(6,"vcl-token",1),v.NdJ("remove",function(e){return n.onRemove(e)}),v._uU(7,"my removable token"),v.qZA(),v.TgZ(8,"vcl-token",1),v.NdJ("remove",function(e){return n.onRemove(e)}),v._uU(9,"my icon token"),v.qZA(),v._UZ(10,"br"),v.TgZ(11,"h3"),v._uU(12,"token-list"),v.qZA(),v.TgZ(13,"vcl-token-list",2),v.NdJ("valueChange",function(e){return n.onListChange(e)}),v.TgZ(14,"vcl-token",3),v._uU(15,"my token 1"),v.qZA(),v.TgZ(16,"vcl-token",3),v._uU(17,"my token 2"),v.qZA(),v.qZA(),v._UZ(18,"br"),v.TgZ(19,"h3"),v._uU(20,"selectable and removable tokenlist"),v.qZA(),v.TgZ(21,"vcl-token-list",4),v.NdJ("valueChange",function(e){return n.onListChange(e)}),v.TgZ(22,"vcl-token",3),v._uU(23,"my token 1"),v.qZA(),v.TgZ(24,"vcl-token",3),v._uU(25,"my token 2"),v.qZA(),v.qZA(),v._UZ(26,"br"),v.TgZ(27,"h3"),v._uU(28,"token-input"),v.qZA(),v.TgZ(29,"vcl-token-input",5),v.NdJ("valueChange",function(e){return n.onInputChange(e)}),v.qZA(),v.TgZ(30,"h3"),v._uU(31,"token-input (disabled)"),v.qZA(),v._UZ(32,"vcl-token-input",6)),2&e&&(v.xp6(4),v.Q6J("selected",!0),v.xp6(2),v.Q6J("removable",!0),v.xp6(2),v.Q6J("removable",!0),v.xp6(5),v.Q6J("value",v.DdM(12,i)),v.xp6(1),v.Q6J("value",1),v.xp6(2),v.Q6J("value",2),v.xp6(5),v.Q6J("value",v.DdM(13,i))("selectable",!0)("removable",!0),v.xp6(1),v.Q6J("value",1),v.xp6(2),v.Q6J("value",2),v.xp6(8),v.Q6J("disabled",!0))},directives:[u.q,r.M,k.p],encapsulation:2}),e})();function p(){return{label:"Token",tabs:{Demo:m,"README.md":{type:"md",content:'# vcl-token\n\n## Usage\n\n```js\nimport { VCLTokenModule } from \'@vcl/ng-vcl\';\n\n@NgModule({\n  imports: [ VCLTokenModule ],\n  ...\n})\nexport class AppComponent {}\n```\n\n## single token\n\n```html\n<vcl-token>mytoken</vcl-token>\n```\n\n## single selected token\n\n```html\n<vcl-token [selected]="true">mytoken</vcl-token>\n```\n\n## single removable token\n\n```html\n<vcl-token [removable]="true" (remove)="onRemove()">mytoken</vcl-token>\n```\n\n## token-list\n\n```html\n<vcl-token-list [selectable]="true" (change)="changed($event);">\n  <vcl-token [selected]="true">mytoken 1</vcl-token>\n  <vcl-token [selected]="false">mytoken 2</vcl-token>\n</vcl-token-list>\n```\n\n## token-input\n\n```html\n<vcl-token-input (valueChange)="changed($event);"></vcl-token-input>\n```\n\n### API\n\n#### vcl-token attributes\n\nName          | Type    | Default   | Description\n------------  | ------- | -------   | ---------------------------------------\n`value`       | any     |           | token value\n`selected`    | boolean | false     | if true, the token is highlighted\n`removable`   | boolean | false     | if true, the remove-cross is shown\n\n#### vcl-token events\n\nName        | Type    | Description\n----------- | ------- | ----------------------\n`remove`    |         | called when the remove-button is pressed\n\n#### token-list attributes\n\nName         | Type     | Default  | Description\n------------ | -------- | -------- | ------------------------------------------------------------\n`value`      | any[]    | any[]    | The values of the selected tokens\n`selectable` | boolean  | false    | tokens are selectable if true\n\n#### token-list events\n\nName                  | Type     | Description\n--------------------- | -------- | -----------\n`tokensChange`        | string[] | called when the selection of token changes\n\n#### vcl-token-input attributes\n\nName                 | Type     | Default              | Description\n------------         | -------- | -------              | ------------------------------------------------------------\n`value`              | Token[]  | []                   | List of tokens\n`selectable`         | boolean  | false                | tokens are selectable if true\n`allowDuplicates`    | boolean  | false                | tokens with matching values are not added\n`addOnEnter`         | boolean  | true                 | New token will be added when pressing enter\n`preselect`          | boolean  | true                 | tokens are preselected after being added if true\n`tokenClass`         | string   |                      | additional css class for tokens\n`tabindex`           | number   | 0                    | The tabindex of the token-input\n\n#### vcl-token-input events\n\nName            | Type    | Description\n--------------- | ------- | ---------------\n`valueChange`   | Token[] | called after tokens are added/removed or the selection of token changes\n`confirm`       | Token[] | called after `enter` is pressed when input element is empty\n\n#### interfaces\n\n```ts\ninterface Token {\n  label: string;\n  value: any;\n  selected?: boolean;\n}\n```\n'},"demo.component.html":{type:"html",content:t(98690)},"demo.component.ts":{type:"ts",content:t(93485)}}}}let d=(()=>{class e{}return e.\u0275fac=function(n){return new(n||e)},e.\u0275mod=v.oAB({type:e}),e.\u0275inj=v.cJS({imports:[[o.ez,l.u5,s.l,c.uW2,c.WdB,a.Bz.forChild([{path:"",component:s.z,data:{demo:p}}])]]}),e})()},98690:function(e,n,t){t.r(n),n.default='<h3>single tokens</h3>\n<vcl-token>my token</vcl-token>\n<vcl-token [selected]="true">my selected token</vcl-token>\n<vcl-token [removable]="true" (remove)="onRemove($event)">my removable token</vcl-token>\n<vcl-token [removable]="true" (remove)="onRemove($event)">my icon token</vcl-token>\n\n<br/>\n\n<h3>token-list</h3>\n<vcl-token-list [value]="[1]" (valueChange)="onListChange($event);">\n  <vcl-token [value]="1">my token 1</vcl-token>\n  <vcl-token [value]="2">my token 2</vcl-token>\n</vcl-token-list>\n<br/>\n\n<h3>selectable and removable tokenlist</h3>\n<vcl-token-list [value]="[1]" [selectable]="true" [removable]="true" (valueChange)="onListChange($event);">\n  <vcl-token [value]="1">my token 1</vcl-token>\n  <vcl-token [value]="2">my token 2</vcl-token>\n</vcl-token-list>\n<br/>\n\n<h3>token-input</h3>\n<vcl-token-input (valueChange)="onInputChange($event);"></vcl-token-input>\n\n<h3>token-input (disabled)</h3>\n<vcl-token-input [disabled]="true"></vcl-token-input>\n'},93485:function(e,n,t){t.r(n),n.default="import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: 'demo.component.html'\n})\nexport class TokenDemoComponent {\n\n  onRemove(token) {\n    console.log('onRemove', token);\n  }\n\n  onListChange(value) {\n    console.log('onListChange', value);\n  }\n\n  onInputChange(value) {\n    console.log('onInputChange', value);\n  }\n}\n"}}]);