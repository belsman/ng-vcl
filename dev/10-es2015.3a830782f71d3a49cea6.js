(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"3/ak":function(t,n,e){"use strict";e.r(n),e.d(n,"demo",(function(){return d})),e.d(n,"AlertDemoModule",(function(){return y}));var r=e("ofXK"),s=e("tyNb"),o=e("19H1"),i=e("2FIb"),l=e("HDdC"),a=e("XNiG"),c=e("l7GE"),u=e("ZUHj");class b{constructor(t,n){this.notifier=t,this.source=n}call(t,n){return n.subscribe(new h(t,this.notifier,this.source))}}class h extends c.a{constructor(t,n,e){super(t),this.notifier=n,this.source=e}error(t){if(!this.isStopped){let e=this.errors,r=this.retries,s=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{e=new a.a;try{const{notifier:t}=this;r=t(e)}catch(n){return super.error(n)}s=Object(u.a)(this,r)}this._unsubscribeAndRecycle(),this.errors=e,this.retries=r,this.retriesSubscription=s,e.next(t)}}_unsubscribe(){const{errors:t,retriesSubscription:n}=this;t&&(t.unsubscribe(),this.errors=null),n&&(n.unsubscribe(),this.retriesSubscription=null),this.retries=null}notifyNext(t,n,e,r,s){const{_unsubscribe:o}=this;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)}}var p=e("eIep"),m=e("vkgz"),f=e("fXoL"),g=e("6B8K");function A(t,n){return new l.a(e=>{setTimeout(()=>{let r;r="function"==typeof n?n():!!n,r?e.error(t):(e.next(t),e.complete())},1e3)})}let w=(()=>{class t{constructor(t){this.alert=t}message(){this.alert.alert("A message")}messageWithTitle(){this.alert.alert("A message",{title:"A title"})}info(){this.alert.info("This is an information",{title:"An information"})}success(){this.alert.success("You are successful",{title:"A success"})}warning(){this.alert.warning("This is a warning",{title:"A warning"})}error(){this.alert.error("This is an error",{title:"An error"})}htmlMessage(){this.alert.alert('Use <i>as much<i> <a href="//www.w3schools.com/html/">HTML</a> as you <b>like</b>',{html:!0})}custom(){this.alert.open({text:"This is a bit customized...",title:"Information",type:o.AlertType.Info,showCloseButton:!0,showCancelButton:!0,confirmButtonClass:"suggestive",confirmButtonPrepIcon:"fas:bolt",cancelButtonColor:"orange",customClass:"scale130p"})}question(){this.alert.open({text:"Do you really want to delete the file?",title:"Delete file?",type:o.AlertType.Question,showCloseButton:!0,showCancelButton:!0,cancelButtonLabel:"No",confirmButtonLabel:"Yes"}).subscribe(t=>{"confirm"===t.action?this.alert.success("File deleted"):this.alert.error("Reason: "+t.action,{title:"File not deleted"})})}async(){this.alert.open({text:"Determine your user agent?",confirmAction:A(window.navigator.userAgent),showCancelButton:!0}).subscribe(t=>{"confirm"===t.action&&this.alert.info(t.value,{title:"Your user agent"})})}inputText(){this.alert.open({text:"What is your name?",input:o.AlertInput.Text,confirmButtonLabel:"Next",inputValidator:t=>{if("string"!=typeof t||t.length<2)throw new Error("Invalid name!");return!0}}).subscribe(t=>{"confirm"===t.action&&this.alert.info("Hello "+t.value)})}retry(){let t=0;const n=A((new Date).toLocaleTimeString(),()=>++t<=1).pipe((e=t=>t.pipe(Object(p.a)(t=>this.alert.open({text:"Retry?",type:o.AlertType.Warning,showCancelButton:!0,closeOnBackdropClick:!1,closeOnEscape:!1}).pipe(Object(m.a)(t=>{if("cancel"===t.action)throw new Error})))),t=>t.lift(new b(e,t))));var e;this.alert.open({text:"Show current time? (will fail the first time)",showCancelButton:!0,confirmAction:n}).subscribe(t=>{this.alert.info(t.value,{title:"Time"})})}}return t.\u0275fac=function(n){return new(n||t)(f.Jb(o.AlertService))},t.\u0275cmp=f.Db({type:t,selectors:[["ng-component"]],decls:48,vars:0,consts:[["vcl-button","",3,"click"]],template:function(t,n){1&t&&(f.Pb(0,"button",0),f.Wb("click",(function(){return n.message()})),f.xc(1,"A message"),f.Ob(),f.Kb(2,"br"),f.Kb(3,"br"),f.Pb(4,"button",0),f.Wb("click",(function(){return n.messageWithTitle()})),f.xc(5,"A title and a message"),f.Ob(),f.Kb(6,"br"),f.Kb(7,"br"),f.Pb(8,"button",0),f.Wb("click",(function(){return n.info()})),f.xc(9,"An info"),f.Ob(),f.Kb(10,"br"),f.Kb(11,"br"),f.Pb(12,"button",0),f.Wb("click",(function(){return n.success()})),f.xc(13,"A success"),f.Ob(),f.Kb(14,"br"),f.Kb(15,"br"),f.Pb(16,"button",0),f.Wb("click",(function(){return n.warning()})),f.xc(17,"A warning"),f.Ob(),f.Kb(18,"br"),f.Kb(19,"br"),f.Pb(20,"button",0),f.Wb("click",(function(){return n.error()})),f.xc(21,"An error"),f.Ob(),f.Kb(22,"br"),f.Kb(23,"br"),f.Pb(24,"button",0),f.Wb("click",(function(){return n.htmlMessage()})),f.xc(25,"A html message"),f.Ob(),f.Kb(26,"br"),f.Kb(27,"br"),f.Pb(28,"button",0),f.Wb("click",(function(){return n.custom()})),f.xc(29,"A custom info message"),f.Ob(),f.Kb(30,"br"),f.Kb(31,"br"),f.Pb(32,"button",0),f.Wb("click",(function(){return n.question()})),f.xc(33,"A question"),f.Ob(),f.Kb(34,"br"),f.Kb(35,"br"),f.Pb(36,"button",0),f.Wb("click",(function(){return n.async()})),f.xc(37,"An async request"),f.Ob(),f.Kb(38,"br"),f.Kb(39,"br"),f.Pb(40,"button",0),f.Wb("click",(function(){return n.retry()})),f.xc(41,"Retrying an async request"),f.Ob(),f.Kb(42,"br"),f.Kb(43,"br"),f.Pb(44,"button",0),f.Wb("click",(function(){return n.inputText()})),f.xc(45,"A text input"),f.Ob(),f.Kb(46,"br"),f.Kb(47,"br"))},directives:[g.b],encapsulation:2}),t})();function d(){return{label:"Alert",tabs:{Demo:w,"README.md":{type:"md",content:"# vcl-alert\n\nBetter javascript alert()\n\n## Usage\n\n```ts\n@Component({ ... })\nexport class MyComponent {\n\n  constructor(private alert: AlertService) {}\n\n  message() {\n    this.alert.success('Done!');\n  }\n\n  deleteFile() {\n    this.alert.open({\n      text: 'Do you really want to delete the file?',\n      title: 'Delete file',\n      type: AlertType.Question,\n      showCloseButton: true,\n      showCancelButton: true,\n      cancelButtonLabel: 'No',\n      confirmButtonLabel: 'Yes'\n    }).subscribe((result) => {\n      if (result.action === 'confirm') {\n        this.alert.success('File deleted');\n      } else {\n        this.alert.error('File not deleted');\n      }\n    });\n  }\n\n}\n```\n\n### Examples\n\n```ts\n// Simple message\nthis.alert.success('A message');\n\n// Message with a title\nthis.alert.info('A message', {\n  title: 'A title'\n});\n\n// HTML Message\nthis.alert.open({\n  text: `Use <i>as much<i> <a href=\"//www.w3schools.com/html/\">HTML</a> as you <b>like</b>`.\n  html: true\n});\n\n// Customized info message\nthis.alert.open({\n  title: 'Information',\n  text: 'This is a bit customized...',\n  type: AlertType.Info,\n  showCloseButton: true,\n  showCancelButton: true,\n  confirmButtonClass: 'vclSuggestive',\n  confirmButtonPrepIcon: 'fas:bolt',\n  cancelButtonColor: 'orange',\n  customClass: 'vclScale130p',\n});\n\n// Confirmation\nthis.alert.open({\n  title: 'Delete file',\n  text: 'Do you really want to delete the file?',\n  type: AlertType.Question,\n  showCloseButton: true,\n  showCancelButton: true,\n  cancelButtonLabel: 'No',\n  confirmButtonLabel: 'Yes'\n}).subscribe((result) => {\n  if (result.action === 'confirm') {\n    this.alert.success('File deleted');\n  } else {\n    this.alert.error('File not deleted');\n  }\n});\n\n// Handling async data\nthis.alert.open({\n  text: 'Fetch data?',\n  confirmAction: this.http.get('/foo/data'),\n  showCancelButton: true\n}).subscribe(result => {\n  if (result.action === 'confirm') {\n    this.alert.info(result.value, { title: 'Your foo data' });\n  } else if (result.action === 'error') {\n    this.alert.error(err, { title: 'Could not fetch data' });\n  }\n});\n\n// With an input element\nthis.alert.open({\n  text: 'What is your name?',\n  input: AlertInput.Text,\n  confirmButtonLabel: 'Next',\n  inputValidator: (value) => {\n    if (typeof value !== 'string' || value.length < 2) {\n      throw 'This is not your name!';\n    }\n    return true;\n  }\n}).subscribe(result => {\n  this.alert.info('Hello ' + result.value);\n});\n```\n\n### Some helper methods\n\n```ts\nalert(text: string, opts?: AlertOptions); // Just the message\ninfo(text: string, opts?: AlertOptions); // Message with AlertType.Info\nsuccess(text: string, opts?: AlertOptions); // Message with AlertType.Success\nwarning(text: string, opts?: AlertOptions); // Message with AlertType.Warning\nerror(text: string, opts?: AlertOptions); // Message with AlertType.Error\nquestion(text: string, opts?: AlertOptions); // Message with AlertType.Question and showCancelButton=true\n```\n\n### API\n\n#### Alert Attributes\n\nAll attributes are optional\n\n| Name                    | Type           | Default         | Description\n| ----------------------- | -------------- | --------------- | --------------\n| `text`                    | string         |                 | The main message\n| `title`                   | string         |                 | A title\n| `html`                    | boolean        | false           | Treats the main message as html when `true`\n| `type`                    | AlertType      | None            | The type. Defines color and icon.\n| `modal`                   | boolean        | true            | Allow closing via ESC and offclick if true\n| `customClass`             | string         |                 | A custom css class for the alert modal\n| `showConfirmButton`       | boolean        | true            | Show the confirmation button\n| `showCancelButton`        | boolean        | false           | Show the cancel button\n| `showCloseButton`         | boolean        | false           | Show the close button\n| `confirmButtonLabel`      | string         | 'OK'            | Changes the confirm button label\n| `confirmButtonClass`      | string         | 'emphasized'    | Adds a class to the confirm button\n| `confirmButtonPrepIcon`   | string         |                 | icon to be prepended to the confirm button label\n| `confirmButtonAppIcon`    | string         |                 | same as `confirmButtonPrepIcon`, but appended\n| `cancelButtonLabel`       | string         | 'Cancel'        | Changes the cancel button label\n| `cancelButtonClass`       | string         | 'danger'        | Adds a class to the cancel button\n| `cancelButtonPrepIcon`    | string         |                 | icon to be prepended to the cancel button label\n| `cancelButtonAppIcon`     | string         |                 | same as `cancelButtonPrepIcon`, but appended\n| `cancelButtonThrowsError` | boolean        |                 | Throw an error instead of passing a result on cancel\n| `confirmAction`           | Observable     |                 | Enables loader and subscribes to observable. Closes alert when the observable completes or errors.\n| `input`                   | AlertInput     | None            | Input element\n| `inputValue`              | any            |                 | Default value for the input\n| `inputPlaceholder`        | string         |                 | A placeholder. Shown in the input element when using AlertInput.Text\n| `inputValidator`          | function       |                 | Input validator callback\n\n#### Enums\n\n```ts\nexport enum AlertType {\n  None,\n  Question,\n  Info,\n  Success,\n  Warning,\n  Error\n}\n\nexport enum AlertInput {\n  None,\n  Text\n}\n```\n"},"demo.component.html":{type:"html",content:e("9nkN")},"demo.component.ts":{type:"ts",content:e("Mrzy")}}}}let y=(()=>{class t{}return t.\u0275mod=f.Hb({type:t}),t.\u0275inj=f.Gb({factory:function(n){return new(n||t)},imports:[[r.c,i.b,o.VCLAlertModule,o.VCLButtonModule,s.g.forChild([{path:"",component:i.a,data:{demo:d}}])]]}),t})()},"9nkN":function(t,n,e){"use strict";e.r(n),n.default='<button vcl-button (click)="message()">A message</button><br><br>\n<button vcl-button (click)="messageWithTitle()">A title and a message</button><br><br>\n<button vcl-button (click)="info()">An info</button><br><br>\n<button vcl-button (click)="success()">A success</button><br><br>\n<button vcl-button (click)="warning()">A warning</button><br><br>\n<button vcl-button (click)="error()">An error</button><br><br>\n<button vcl-button (click)="htmlMessage()">A html message</button><br><br>\n<button vcl-button (click)="custom()">A custom info message</button><br><br>\n<button vcl-button (click)="question()">A question</button><br><br>\n<button vcl-button (click)="async()">An async request</button><br><br>\n<button vcl-button (click)="retry()">Retrying an async request</button><br><br>\n<button vcl-button (click)="inputText()">A text input</button><br><br>\n'},Mrzy:function(t,n,e){"use strict";e.r(n),n.default="import { Observable } from 'rxjs';\nimport { AlertService, AlertType, AlertInput } from '@vcl/ng-vcl';\nimport { Component } from '@angular/core';\nimport { retryWhen, switchMap, tap } from 'rxjs/operators';\n\nfunction createAsyncResult(data: any, error?: boolean | (() => (any))): Observable<any> {\n  return new Observable(observer => {\n    setTimeout(() => {\n      let err;\n      if (typeof error === 'function') {\n        err = error();\n      } else {\n        err = !!error;\n      }\n\n      if (err) {\n        observer.error(data);\n      } else {\n        observer.next(data);\n        observer.complete();\n      }\n    }, 1000);\n  });\n}\n\n@Component({\n  templateUrl: 'demo.component.html'\n})\nexport class AlertDemoComponent {\n\n  constructor(private alert: AlertService) {}\n\n  message() {\n    this.alert.alert('A message');\n  }\n\n  messageWithTitle() {\n    this.alert.alert('A message', {\n      title: 'A title'\n    });\n  }\n\n  info() {\n    this.alert.info('This is an information', {\n      title: 'An information'\n    });\n  }\n\n  success() {\n    this.alert.success('You are successful', {\n      title: 'A success'\n    });\n  }\n\n  warning() {\n    this.alert.warning('This is a warning', {\n      title: 'A warning'\n    });\n  }\n\n  error() {\n    this.alert.error('This is an error', {\n      title: 'An error'\n    });\n  }\n\n  htmlMessage() {\n    this.alert.alert(`Use <i>as much<i> <a href=\"//www.w3schools.com/html/\">HTML</a> as you <b>like</b>`, {\n      html: true\n    });\n  }\n\n  custom() {\n    this.alert.open({\n      text: 'This is a bit customized...',\n      title: 'Information',\n      type: AlertType.Info,\n      showCloseButton: true,\n      showCancelButton: true,\n      confirmButtonClass: 'suggestive',\n      confirmButtonPrepIcon: 'fas:bolt',\n      cancelButtonColor: 'orange',\n      customClass: 'scale130p',\n    });\n  }\n\n  question() {\n    this.alert.open({\n      text: 'Do you really want to delete the file?',\n      title: 'Delete file?',\n      type: AlertType.Question,\n      showCloseButton: true,\n      showCancelButton: true,\n      cancelButtonLabel: 'No',\n      confirmButtonLabel: 'Yes'\n    }).subscribe((result) => {\n      if (result.action === 'confirm') {\n        this.alert.success('File deleted');\n      } else {\n        this.alert.error('Reason: ' + result.action , { title: 'File not deleted' });\n      }\n    });\n  }\n\n  async() {\n    this.alert.open({\n      text: 'Determine your user agent?',\n      confirmAction: createAsyncResult(window.navigator.userAgent),\n      showCancelButton: true\n    }).subscribe(result => {\n      if (result.action === 'confirm') {\n        this.alert.info(result.value, {\n          title: 'Your user agent'\n        });\n      }\n    });\n  }\n\n  inputText() {\n    this.alert.open({\n      text: 'What is your name?',\n      input: AlertInput.Text,\n      confirmButtonLabel: 'Next',\n      inputValidator: (value) => {\n        if (typeof value !== 'string' || value.length < 2) {\n          throw new Error('Invalid name!');\n        }\n        return true;\n      }\n    }).subscribe(result => {\n      if (result.action === 'confirm') {\n        this.alert.info('Hello ' + result.value);\n      }\n    });\n  }\n\n  retry() {\n    // This fake async request will fail the first time\n    let fails = 0;\n    const fakeAsync = createAsyncResult(new Date().toLocaleTimeString(), () => ++fails <= 1);\n\n    // Add a retry routine using an alert\n    const fakeAsyncWithRetries = fakeAsync.pipe(\n      retryWhen(errors => {\n        return errors.pipe(switchMap(err => {\n          return this.alert.open({\n            text: 'Retry?',\n            type: AlertType.Warning,\n            showCancelButton: true,\n            closeOnBackdropClick: false,\n            closeOnEscape: false\n          }).pipe(tap(result => {\n            if (result.action === 'cancel') {\n              throw new Error();\n            }\n          }));\n        }));\n      }));\n\n    this.alert.open({\n      text: 'Show current time? (will fail the first time)',\n      showCancelButton: true,\n      confirmAction: fakeAsyncWithRetries,\n    }).subscribe(result => {\n      this.alert.info(result.value, { title: 'Time' });\n    });\n  }\n\n}\n"}}]);