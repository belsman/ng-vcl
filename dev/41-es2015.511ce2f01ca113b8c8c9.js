(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{"7u4V":function(e,n,t){"use strict";t.r(n),n.default='<h3>single tokens</h3>\n<vcl-token>my token</vcl-token>\n<vcl-token [selected]="true">my selected token</vcl-token>\n<vcl-token [removable]="true" (remove)="onRemove($event)">my removable token</vcl-token>\n<vcl-token [removable]="true" (remove)="onRemove($event)">my icon token</vcl-token>\n\n<br/>\n\n<h3>token-list</h3>\n<vcl-token-list [value]="[1]" (valueChange)="onListChange($event);">\n  <vcl-token [value]="1">my token 1</vcl-token>\n  <vcl-token [value]="2">my token 2</vcl-token>\n</vcl-token-list>\n<br/>\n\n<h3>selectable and removable tokenlist</h3>\n<vcl-token-list [value]="[1]" [selectable]="true" [removable]="true" (valueChange)="onListChange($event);">\n  <vcl-token [value]="1">my token 1</vcl-token>\n  <vcl-token [value]="2">my token 2</vcl-token>\n</vcl-token-list>\n<br/>\n\n<h3>token-input</h3>\n<vcl-token-input (valueChange)="onInputChange($event);"></vcl-token-input>\n\n<h3>token-input (disabled)</h3>\n<vcl-token-input [disabled]="true"></vcl-token-input>\n'},FDdc:function(e,n,t){"use strict";t.r(n),t.d(n,"demo",(function(){return m})),t.d(n,"TokenDemoModule",(function(){return d}));var o=t("ofXK"),l=t("3Pt+"),a=t("tyNb"),c=t("19H1"),s=t("2FIb"),v=t("fXoL"),r=t("sM5x"),u=t("nhKh"),i=t("tMsr");const k=function(){return[1]};let b=(()=>{class e{onRemove(e){console.log("onRemove",e)}onListChange(e){console.log("onListChange",e)}onInputChange(e){console.log("onInputChange",e)}}return e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=v.Db({type:e,selectors:[["ng-component"]],decls:33,vars:14,consts:[[3,"selected"],[3,"removable","remove"],[3,"value","valueChange"],[3,"value"],[3,"value","selectable","removable","valueChange"],[3,"valueChange"],[3,"disabled"]],template:function(e,n){1&e&&(v.Pb(0,"h3"),v.xc(1,"single tokens"),v.Ob(),v.Pb(2,"vcl-token"),v.xc(3,"my token"),v.Ob(),v.Pb(4,"vcl-token",0),v.xc(5,"my selected token"),v.Ob(),v.Pb(6,"vcl-token",1),v.Wb("remove",(function(e){return n.onRemove(e)})),v.xc(7,"my removable token"),v.Ob(),v.Pb(8,"vcl-token",1),v.Wb("remove",(function(e){return n.onRemove(e)})),v.xc(9,"my icon token"),v.Ob(),v.Kb(10,"br"),v.Pb(11,"h3"),v.xc(12,"token-list"),v.Ob(),v.Pb(13,"vcl-token-list",2),v.Wb("valueChange",(function(e){return n.onListChange(e)})),v.Pb(14,"vcl-token",3),v.xc(15,"my token 1"),v.Ob(),v.Pb(16,"vcl-token",3),v.xc(17,"my token 2"),v.Ob(),v.Ob(),v.Kb(18,"br"),v.Pb(19,"h3"),v.xc(20,"selectable and removable tokenlist"),v.Ob(),v.Pb(21,"vcl-token-list",4),v.Wb("valueChange",(function(e){return n.onListChange(e)})),v.Pb(22,"vcl-token",3),v.xc(23,"my token 1"),v.Ob(),v.Pb(24,"vcl-token",3),v.xc(25,"my token 2"),v.Ob(),v.Ob(),v.Kb(26,"br"),v.Pb(27,"h3"),v.xc(28,"token-input"),v.Ob(),v.Pb(29,"vcl-token-input",5),v.Wb("valueChange",(function(e){return n.onInputChange(e)})),v.Ob(),v.Pb(30,"h3"),v.xc(31,"token-input (disabled)"),v.Ob(),v.Kb(32,"vcl-token-input",6)),2&e&&(v.yb(4),v.fc("selected",!0),v.yb(2),v.fc("removable",!0),v.yb(2),v.fc("removable",!0),v.yb(5),v.fc("value",v.gc(12,k)),v.yb(1),v.fc("value",1),v.yb(2),v.fc("value",2),v.yb(5),v.fc("value",v.gc(13,k))("selectable",!0)("removable",!0),v.yb(1),v.fc("value",1),v.yb(2),v.fc("value",2),v.yb(8),v.fc("disabled",!0))},directives:[r.b,u.a,i.a],encapsulation:2}),e})();function m(){return{label:"Token",tabs:{Demo:b,"README.md":{type:"md",content:'# vcl-token\n\n## Usage\n\n```js\nimport { VCLTokenModule } from \'@vcl/ng-vcl\';\n\n@NgModule({\n  imports: [ VCLTokenModule ],\n  ...\n})\nexport class AppComponent {}\n```\n\n## single token\n\n```html\n<vcl-token>mytoken</vcl-token>\n```\n\n## single selected token\n\n```html\n<vcl-token [selected]="true">mytoken</vcl-token>\n```\n\n## single removable token\n\n```html\n<vcl-token [removable]="true" (remove)="onRemove()">mytoken</vcl-token>\n```\n\n## token-list\n\n```html\n<vcl-token-list [selectable]="true" (change)="changed($event);">\n  <vcl-token [selected]="true">mytoken 1</vcl-token>\n  <vcl-token [selected]="false">mytoken 2</vcl-token>\n</vcl-token-list>\n```\n\n## token-input\n\n```html\n<vcl-token-input (valueChange)="changed($event);"></vcl-token-input>\n```\n\n### API\n\n#### vcl-token attributes\n\nName          | Type    | Default   | Description\n------------  | ------- | -------   | ---------------------------------------\n`value`       | any     |           | token value\n`selected`    | boolean | false     | if true, the token is highlighted\n`removable`   | boolean | false     | if true, the remove-cross is shown\n\n#### vcl-token events\n\nName        | Type    | Description\n----------- | ------- | ----------------------\n`remove`    |         | called when the remove-button is pressed\n\n#### token-list attributes\n\nName         | Type     | Default  | Description\n------------ | -------- | -------- | ------------------------------------------------------------\n`value`      | any[]    | any[]    | The values of the selected tokens\n`selectable` | boolean  | false    | tokens are selectable if true\n\n#### token-list events\n\nName                  | Type     | Description\n--------------------- | -------- | -----------\n`tokensChange`        | string[] | called when the selection of token changes\n\n#### vcl-token-input attributes\n\nName                 | Type     | Default              | Description\n------------         | -------- | -------              | ------------------------------------------------------------\n`value`              | Token[]  | []                   | List of tokens\n`selectable`         | boolean  | false                | tokens are selectable if true\n`allowDuplicates`    | boolean  | false                | tokens with matching values are not added\n`addOnEnter`         | boolean  | true                 | New token will be added when pressing enter\n`preselect`          | boolean  | true                 | tokens are preselected after being added if true\n`tokenClass`         | string   |                      | additional css class for tokens\n`tabindex`           | number   | 0                    | The tabindex of the token-input\n\n#### vcl-token-input events\n\nName            | Type    | Description\n--------------- | ------- | ---------------\n`valueChange`   | Token[] | called after tokens are added/removed or the selection of token changes\n`confirm`       | Token[] | called after `enter` is pressed when input element is empty\n\n#### interfaces\n\n```ts\ninterface Token {\n  label: string;\n  value: any;\n  selected?: boolean;\n}\n```\n'},"demo.component.html":{type:"html",content:t("7u4V")},"demo.component.ts":{type:"ts",content:t("x+fm")}}}}let d=(()=>{class e{}return e.\u0275mod=v.Hb({type:e}),e.\u0275inj=v.Gb({factory:function(n){return new(n||e)},imports:[[o.c,l.m,s.b,c.VCLTokenModule,c.VCLInputModule,a.g.forChild([{path:"",component:s.a,data:{demo:m}}])]]}),e})()},"x+fm":function(e,n,t){"use strict";t.r(n),n.default="import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: 'demo.component.html'\n})\nexport class TokenDemoComponent {\n\n  onRemove(token) {\n    console.log('onRemove', token);\n  }\n\n  onListChange(value) {\n    console.log('onListChange', value);\n  }\n\n  onInputChange(value) {\n    console.log('onInputChange', value);\n  }\n}\n"}}]);