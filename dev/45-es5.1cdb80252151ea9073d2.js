(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{lwGh:function(e,n,t){"use strict";t.r(n),t.d(n,"demo",(function(){return p})),t.d(n,"DateadapterDemoModule",(function(){return l}));var a=t("ofXK"),r=t("tyNb"),o=t("19H1"),s=t("2FIb"),d=t("fXoL");function p(){return{label:"Date Adapter",tabs:{"README.md":{type:"md",content:"# VCLDateAdapter\n\nThe `VCLDateAdapter` is a service that provides utils for date operations.\n\n```js\nimport { VCLDateadapterModule } from '@vcl/ng-vcl';;\n\n@NgModule({\n  imports: [ VCLDateadapterModule ],\n  ...\n})\nexport class AppComponent {}\n\n```\n```ts\nimport { VCLDateAdapter } from '@vcl/ng-vcl';;\n\n@Component({ ... })\nexport class MyComponent {\n\n  constructor(private dateAdapter: VCLDateAdapter<Date>) {\n    const today = new Date();\n    const s = dateAdapter.format(today, 'date');\n  }\n```\n\nCheck the `VCLDateAdapter` [abstract class](https://github.com/ng-vcl/ng-vcl/tree/dev/lib/ng-vcl/src/dateadapter/dateadapter.ts) for an overview of methods and properties.\n\n### Date representation\n\nThe DateAdapter and components use the `VCLDate` generic type. The exact type is defined by the `VCLDateAdapter`.\nThe default implementation is using the native javascript date object.\n\n#### Date range\n\nA date range is defined by a start and an end date.\n\n```ts\nexport interface VCLDateRange<VCLDate> {\n  start: VCLDate;\n  end: VCLDate;\n}\n```\n\n### Localization\n\nThe default date adapter uses the javascript `Intl` interfaces for localization.\nThe angular `LOCALE_ID` token is used to determine the application locale.\n\nExample:\n```ts\nimport { LOCALE_ID } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule, {\n  providers: [{provide: LOCALE_ID, useValue: 'de' }]\n});\n```\n\nCheck the [official docs](https://angular.io/guide/i18n) for further information.\n\n#### Parsing and formatting input controls\n\nOne shortcomings of the native Date object is the lack of parsing support for specific locales.\nThe default data adapter expresses date and time for inputs in `ISO 8601`. e.g. `2019-08-08` or `18:11`\n\nng-vcl provides support for the following locales: `en`, `en-us`, `en-gb`, `de`, `de-AT`, `de-CH`, `de-DE`, `de-LI` and `de-LU`\nAdd one or more of the following providers to active support for a locale.\n\n```ts\nimport { VCL_NATIVE_DATE_ADAPTER_PARSER, NativeDateAdapterParserEN, NativeDateAdapterParserENGB, NativeDateAdapterParserDE } from '@vcl/ng-vcl';\n\n@NgModule({\n  providers: [\n    {\n      // `en`, `en-us`\n      provide: VCL_NATIVE_DATE_ADAPTER_PARSER,\n      useClass: NativeDateAdapterParserEN,\n      multi: true\n    },\n    {\n      // `en-gb\n      provide: VCL_NATIVE_DATE_ADAPTER_PARSER,\n      useClass: NativeDateAdapterParserENGB,\n      multi: true\n    }  ,\n    {\n      // `de`, `de-AT`, `de-CH`, `de-DE`, `de-LI`, `de-LU`\n      provide: VCL_NATIVE_DATE_ADAPTER_PARSER,\n      useClass: NativeDateAdapterParserDE,\n      multi: true\n    }  \n  ],\n})\nexport class MyApp {}\n```\n\nOther locales can be added by providing `VCL_NATIVE_DATE_ADAPTER_PARSER` with a class implementing the `VCLNativeDateAdapterParser`\nCheck one of the existing [providers](https://github.com/ng-vcl/ng-vcl/tree/dev/lib/ng-vcl/src/dateadapter/parsers) for an example.\n\n### Weekday offset\n\nThe default first day of the week is Sunday.\nAdd the following provider for a weekday offset.\n\n```ts\nimport { VCL_DATE_ADAPTER_WEEKDAY_OFFSET } from '@vcl/ng-vcl';\n\n@NgModule({\n  providers: [\n    // Calendar starts on Monday\n    { provide: VCL_DATE_ADAPTER_WEEKDAY_OFFSET, useValue: 1 }\n  ],\n})\nexport class MyApp {}\n```\n\n### Custom date adapter\n\nA custom adapter must extend from `VCLDateAdapter` and implement the abstract methods.\n\n```ts\nexport class MyDateAdapter extends VCLDateAdapter<MyDate> {\n\n  constructor(\n    @Inject(VCL_DATE_ADAPTER_WEEKDAY_OFFSET)\n    private weekDayOffset: number,\n    @Optional()\n    @Inject(LOCALE_ID)\n    private locale?: string,\n  ) {\n    super();\n  }\n\n  // Abstract class implementation\n  isDate(date: any): date is Date {\n    ...\n  }\n  ...\n}\n```\n\n```ts\nimport { VCLDateAdapter } from '@vcl/ng-vcl';\n\n@NgModule({\n  providers: [\n    { provide: VCLDateAdapter, useClass: MyDateAdapter }\n  ],\n})\nexport class MyApp {}\n```\n"}}}}var i,l=((i=function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}).\u0275mod=d.Ib({type:i}),i.\u0275inj=d.Hb({factory:function(e){return new(e||i)},imports:[[a.c,s.b,o.VCLButtonModule,o.VCLCalendarModule,r.g.forChild([{path:"",component:s.a,data:{demo:p}}])]]}),i)}}]);