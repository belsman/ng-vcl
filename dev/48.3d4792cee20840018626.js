(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{Ajjl:function(n,s,l){"use strict";l.r(s);var a=l("CcnG"),e=l("5cNt"),t=function(){return function(){}}(),o=function(){function n(){}return Object.defineProperty(n.prototype,"target",{set:function(n){this.host=new e.jc(n)},enumerable:!0,configurable:!0}),n.prototype.ngAfterViewInit=function(){this.host.connectWormhole(t,{value:"value"})},n.prototype.ngOnDestroy=function(){this.host&&this.host.clearWormholes()},n}(),p={demo:function(){return{label:"Wormhole",tabs:{Demo:o,"README.md":{type:"md",content:l("l5Fu")},"demo.component.html":{type:"pre",content:l("sOqk")},"demo.component.ts":{type:"pre",content:l("VVb+")}}}}},r=function(){return function(){}}(),c=l("pMnS"),h=l("8Ip6"),m=a.ob({encapsulation:2,styles:[],data:{}});function u(n){return a.Jb(0,[(n()(),a.qb(0,0,null,null,3,"p",[],null,null,null,null,null)),(n()(),a.Hb(-1,null,["I am a component. And this is my "])),(n()(),a.qb(2,0,null,null,1,"b",[],null,null,null,null,null)),(n()(),a.Hb(3,null,["",""]))],null,function(n,s){n(s,3,0,s.component.value)})}function i(n){return a.Jb(0,[(n()(),a.qb(0,0,null,null,1,"ng-component",[],null,null,null,u,m)),a.pb(1,49152,null,0,t,[],null,null)],null,null)}var j=a.mb("ng-component",t,i,{value:"value"},{},[]),d=a.ob({encapsulation:2,styles:[],data:{}});function g(n){return a.Jb(0,[(n()(),a.Hb(-1,null,[" But is rendered below\n"]))],null,null)}function b(n){return a.Jb(0,[a.Fb(402653184,1,{myFirstTemplateWormhole:0}),a.Fb(402653184,2,{target:0}),(n()(),a.Hb(-1,null,["The template wormhole is defined above the hr\n"])),(n()(),a.hb(0,[["someTemplate",2]],null,0,null,g)),(n()(),a.qb(4,0,null,null,0,"hr",[],null,null,null,null,null)),(n()(),a.qb(5,16777216,null,null,1,"wormhole",[],null,null,null,null,null)),a.pb(6,671744,null,0,e.ic,[a.P,a.r],{target:[0,"target"]},null),(n()(),a.qb(7,0,null,null,0,"hr",[],null,null,null,null,null)),(n()(),a.qb(8,16777216,[[2,3],["target",1]],null,0,"div",[],null,null,null,null,null))],function(n,s){n(s,6,0,a.Ab(s,3))},null)}function w(n){return a.Jb(0,[(n()(),a.qb(0,0,null,null,1,"ng-component",[],null,null,null,b,d)),a.pb(1,4374528,null,0,o,[],null,null)],null,null)}var y=a.mb("ng-component",o,w,{},{},[]),f=l("Ip0R"),v=l("2FIb"),k=l("ZYCi"),C=l("PNUx");l.d(s,"WormholeDemoModuleNgFactory",function(){return W});var W=a.nb(r,[],function(n){return a.xb([a.yb(512,a.j,a.cb,[[8,[c.a,h.a,y,j]],[3,a.j],a.y]),a.yb(4608,f.n,f.m,[a.v,[2,f.y]]),a.yb(1073742336,f.c,f.c,[]),a.yb(1073742336,e.fc,e.fc,[]),a.yb(1073742336,e.Yb,e.Yb,[]),a.yb(1073742336,v.a,v.a,[]),a.yb(1073742336,k.m,k.m,[[2,k.s],[2,k.l]]),a.yb(1073742336,r,r,[]),a.yb(1024,k.j,function(){return[[{path:"",component:C.a,data:p}]]},[])])})},"VVb+":function(n,s){n.exports='<span class="hljs-keyword">import</span> { Component, ViewChild, Input, ViewContainerRef, AfterViewInit, OnDestroy } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { WormholeHost } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ng-vcl/ng-vcl\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  template: <span class="hljs-string">\'&lt;p&gt;I am a component. And this is my &lt;b&gt;{{value}}&lt;/b&gt;&lt;/p&gt;\'</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> MyComponent {\n  <span class="hljs-meta">@Input</span>()\n  value: <span class="hljs-built_in">string</span>;\n}\n\n<span class="hljs-meta">@Component</span>({\n  templateUrl: <span class="hljs-string">\'demo.component.html\'</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> WormholeDemoComponent <span class="hljs-keyword">implements</span> AfterViewInit, OnDestroy {\n\n  <span class="hljs-comment">// Template wormhole</span>\n  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">\'myFirstWormhole\'</span>)\n  myFirstTemplateWormhole: <span class="hljs-built_in">any</span>;\n\n\n  <span class="hljs-comment">// Component wormhole</span>\n\n  <span class="hljs-comment">// This is the target where the component will be rendered</span>\n  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">\'target\'</span>, { read: ViewContainerRef })\n  <span class="hljs-keyword">set</span> target(vcRef: ViewContainerRef) {\n    <span class="hljs-keyword">this</span>.host =  <span class="hljs-keyword">new</span> WormholeHost(vcRef);\n  }\n\n  host: WormholeHost;\n\n  ngAfterViewInit() {\n    <span class="hljs-comment">// Create and connect wormhole</span>\n    <span class="hljs-keyword">this</span>.host.connectWormhole(MyComponent, {\n      value: <span class="hljs-string">\'value\'</span>\n    });\n  }\n\n  ngOnDestroy() {\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.host) {\n      <span class="hljs-keyword">this</span>.host.clearWormholes();\n    }\n  }\n}\n'},l5Fu:function(n,s){n.exports='<h1 id="wormhole">wormhole</h1>\n<p>The wormhole directive allows to render templates and components in the DOM.</p>\n<h2 id="usage">Usage</h2>\n<pre class="hljs"><span class="hljs-keyword">import</span> { VCLWormholeModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;ng-vcl&apos;</span>;\n\n@NgModule({\n  <span class="hljs-attr">imports</span>: [ VCLWormholeModule ],\n  ...\n})\n<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>{}</pre>\n<p>Use the the <code>wormhole</code> directive to create a wormhole template...</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">myFirstWormhole</span>&gt;</span>\n  I will be rendered through a wormhole\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span></pre>\n<p>...and connect it via the wormholeTarget directive.<br>The template is rendered below the wormhole directive.</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">wormhole</span> [<span class="hljs-attr">connect</span>]=<span class="hljs-string">&quot;myFirstWormhole&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">wormhole</span>&gt;</span>\n<span class="hljs-comment">&lt;!-- The myFirstWormhole template is rendered here --&gt;</span></pre>\n'},sOqk:function(n,s){n.exports='The template wormhole is defined above the hr\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">someTemplate</span>&gt;</span>\n  But is rendered below\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">wormhole</span> [<span class="hljs-attr">connect</span>]=<span class="hljs-string">"someTemplate"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">wormhole</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> #<span class="hljs-attr">target</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n\n\n'}}]);