(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{DCY7:function(s,a){s.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { VCLFormFieldSchemaRoot, FormFieldControl, VCLFormFieldControlSchema, Conditional } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@vcl/ng-vcl\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  template: <span class="hljs-string">`\n    &lt;vcl-form-control-group *ngIf="field.visible"&gt;\n      &lt;label *ngIf="!!field.label" vclFormControlLabel&gt;{{field.label}}&lt;vcl-required *ngIf="field.required"&gt;&lt;/vcl-required&gt;&lt;/label&gt;\n      &lt;demo-counter [formControl]="field.control" [min]="field.params.min" [max]="field.params.max"&gt;&lt;/demo-counter&gt;\n    &lt;/vcl-form-control-group&gt;\n    `</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> FormFieldCounterComponent {\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> field: FormFieldControl</span>) { }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> CounterSchemaParams {\n  min?: <span class="hljs-built_in">number</span>;\n  max?: <span class="hljs-built_in">number</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> CounterSchema <span class="hljs-keyword">extends</span> VCLFormFieldControlSchema {\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">\'counter\'</span>;\n  params?: CounterSchemaParams | Conditional&lt;CounterSchemaParams&gt;;\n}\n'},"FKU+":function(s,a,n){"use strict";n.r(a),n.d(a,"demo",(function(){return A})),n.d(a,"VCLJssFormDemoModule",(function(){return q}));var l=n("ofXK"),e=n("3Pt+"),p=n("tyNb"),r=n("19H1"),t=n("2FIb"),o=n("VRyK"),i=n("lJxs");const c={type:"form",fields:[{name:"name",type:"input",label:"Name",params:{placeholder:"The hero's name"},validators:[e.F.required,e.F.minLength(2)],required:!0,hints:[{type:"error",error:"required",message:"Name is required"},{type:"error",error:"minlength",message:"Name must have a length of at least 2 characters"}]},{type:"textarea",name:"description",label:"Description",params:{placeholder:"The hero's Description"}},{type:"datepicker",name:"dob",label:"Date of Birth",params:{placeholder:"MM/DD/YYYY"}},{type:"password-input",name:"password",label:"Password",params:{placeholder:"Enter password"},validators:[e.F.required,e.F.pattern("(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-zd$@$!%*?&].{8,}")],hints:[{type:"error",error:"required",message:"Password is required"},{type:"error",error:"pattern",message:"Password must..."},{type:"error",error:"pattern",message:"- At least 8 characters in length"},{type:"error",error:"pattern",message:"- Contain a lowercase letters"},{type:"error",error:"pattern",message:"- Contain a uppercase letters"},{type:"error",error:"pattern",message:"- Contain a number"},{type:"error",error:"pattern",message:"- Contain a special character"}]},{type:"counter",name:"level",label:"Level",defaultValue:1,params:{min:1,max:10}},{type:"switch",name:"leader",label:"Leader",defaultValue:!1,visible:Object(r.nb)(["level"],s=>s.value>=5),validators:[s=>s.value?null:{leader:!0}],params:{offLabel:"No",onLabel:"Yes"}},{type:"file-input",name:"picture",label:"Picture",params:{multiple:!1,placeholder:"Picture of the hero"}},{type:"input",name:"email",label:"Email",validators:[e.F.required,e.F.email],required:!0,hints:[{type:"error",error:"required",message:"Email is required"},{type:"error",error:"email",message:"Invalid Email address"}]},{type:"radio-group",name:"gender",label:"Gender",defaultValue:"m",params:{options:[{label:"Male",value:"m"},{label:"Female",value:"f"},{label:"Genderless",value:"g"}]}},{type:"button-group",name:"alignment",label:"Alignment",params:{options:[{label:"Good",value:1},{label:"Neutral",value:0},{label:"Evil",value:-1}]}},{type:"hidden",name:"language",defaultValue:navigator.language},{type:"select-list",name:"class",label:"Class",defaultValue:null,params:{options:[{label:"Warrior",value:"warrior"},{label:"Mage",value:"mage"},{label:"Rogue",value:"rogue"}]}},{type:"slider",name:"hitpoints",label:"Hit Points",defaultValue:15,disabled:Object(r.nb)(["class"],s=>!s.value),params:Object(r.nb)(["class"],s=>"rogue"===s.value?{min:8,max:18,scale:11,lock:!0}:"mage"===s.value?{min:5,max:15,scale:11,lock:!0}:{min:10,max:20,scale:11,lock:!0})},{type:"object",name:"skills",layout:"fieldset",label:"Skills",fields:[{type:"rating",name:"strength",defaultValue:3,params:{items:["1","2","3","4","5"],valueLabel:s=>`Strength (${s})`}},{type:"rating",name:"agility",defaultValue:3,params:{items:["1","2","3","4","5"],valueLabel:s=>`Agility (${s})`}},{type:"rating",name:"intelligence",defaultValue:3,params:{items:["1","2","3","4","5"],valueLabel:s=>`Intelligence (${s})`}}],validators:[s=>{const a=s.get("strength"),n=s.get("agility"),l=s.get("intelligence");return(a&&n&&l?a.value+n.value+l.value:0)>10?{skills:!0}:null}],hints:[Object(r.nb)(["skills","skills.strength","skills.agility","skills.intelligence"],(s,a,n,l)=>{const e=a&&n&&l?a.value+n.value+l.value:0,p=`${e} of 10 skill points used`;return s.hasError("skills")?{type:"error",message:p}:10-e>0?{type:"warning",message:p}:{type:"default",message:p}})]},{type:"token",name:"attributes",label:"Attributes",hints:[{type:"default",message:"Attributes"},{type:"error",error:"minLength",message:"Minimum length is 2"}],validators:[s=>Array.isArray(s.value)&&s.value.length>1?null:{minLength:!0}]},{type:"select",name:"perks",label:"Perks",params:{placeholder:"Select perks",selectionMode:"multiple",options:[{label:"Snake Eater",sublabel:"It gives you a 25% increase to your poison resistance.",value:"snakeeater"},{label:"Swift Learner",sublabel:"Swift Learner\tWhenever you gain experience, you'll receive 5% more experience per level of the perk.",value:"swiftlearner"},{label:"Toughness",sublabel:"It adds 10% to your general damage resistance per level.",value:"toughness"},{label:"Explorer",sublabel:"You'll get more random encounters with this perk.",value:"explorer"}]},validators:[s=>s.value&&Array.isArray(s.value)&&2===s.value.length?null:{perks:!0}],hints:[{type:"error",error:"perks",message:"You must select two perks"}]},{type:"array",name:"items",label:"Items",initialFields:0,fieldLabel:s=>"Item "+(s+1),noFieldsLabel:"No items",field:{type:"object",name:"item_object",fields:[{type:"input",name:"item_name",label:"Name",validators:[e.F.required],required:!0,hints:[{type:"error",error:"required",message:"Item name is required"}]},{type:"input",name:"item_quantity",label:"Quantity",params:{inputType:"number"},validators:[e.F.required,e.F.min(1),e.F.max(10)],required:!0,hints:[{type:"error",error:"required",message:"Item quantity is required"},{type:"error",error:"min",message:"Minimum is 1"},{type:"error",error:"max",message:"Maximum is 10"}]}]}},{type:"checkbox",name:"terms",label:"Agree to our terms",validators:[s=>s.value?null:{termsDisagree:!0}],hints:[{type:"default",message:"Read the terms to learn how we collect, use and share your data"},{type:"error",error:"termsDisagree",message:"You must agree to our Terms"}],errorStateAgent:(s,a)=>a.ngControl.invalid&&s.submitted},{type:"buttons",buttons:[{type:"submit",label:"Submit",class:"emphasized",appIcon:"fas:arrow-circle-right"},{type:"button",label:"Reset",action:"reset"}]}]};var h=n("fXoL"),m=n("xsjC"),j=n("7FAN"),g=n("EaCA"),d=n("8Ii/"),u=n("btmi"),y=n("0O3k");const b=["heroForm"];function k(s,a){if(1&s&&(h.Sb(0,"div",9),h.Sb(1,"h4"),h.yc(2,"Form"),h.Rb(),h.Sb(3,"pre"),h.yc(4),h.ec(5,"json"),h.Rb(),h.Rb()),2&s){const s=a.ngIf;h.Ab(4),h.zc(h.fc(5,1,s))}}let w=(()=>{class s{constructor(s){this.notifier=s,this.material="disabled"}ngOnInit(){this.heroSchema=Object.assign(Object.assign({},c),{material:this.material})}setMaterial(s){this.material=s,this.heroSchema=Object.assign(Object.assign({},c),{material:this.material})}onSubmit(){this.heroForm.ngForm.valid?this.notifier.success("Hero created"):this.notifier.error("Hero invalid")}onAction(s){"reset"===s&&this.heroForm.ngForm&&(this.heroForm.ngForm.resetForm(this.heroForm.field.defaultValue),this.notifier.info("Hero reset"))}ngAfterViewInit(){this.state$=Object(o.a)(this.heroForm.ngForm.statusChanges,this.heroForm.ngForm.valueChanges,this.heroForm.ngForm.ngSubmit).pipe(Object(i.a)(()=>({status:this.heroForm.ngForm.status,valid:this.heroForm.ngForm.valid,dirty:this.heroForm.ngForm.dirty,submitted:this.heroForm.ngForm.submitted,touched:this.heroForm.ngForm.touched,pristine:this.heroForm.ngForm.pristine,errors:this.heroForm.ngForm.errors,value:this.heroForm.ngForm.value})))}}return s.\u0275fac=function(a){return new(a||s)(h.Mb(r.u))},s.\u0275cmp=h.Gb({type:s,selectors:[["ng-component"]],viewQuery:function(s,a){var n;1&s&&h.Dc(b,!0),2&s&&h.mc(n=h.bc())&&(a.heroForm=n.first)},decls:19,vars:5,consts:[["vclFormControlLabel",""],[3,"value","valueChange"],["vclRadioButtonLabel",""],["value","float"],["value","static"],["value","disabled"],[3,"schema","formSubmit","formAction"],["heroForm","vclJssForm"],["class","value",4,"ngIf"],[1,"value"]],template:function(s,a){1&s&&(h.Sb(0,"h2"),h.yc(1,"Create a hero"),h.Rb(),h.Sb(2,"vcl-form-control-group"),h.Sb(3,"label",0),h.yc(4,"Material input mode"),h.Rb(),h.Sb(5,"vcl-radio-group",1),h.ac("valueChange",(function(s){return a.setMaterial(s)})),h.Sb(6,"label",2),h.Nb(7,"vcl-radio-button",3),h.yc(8," Float "),h.Rb(),h.Sb(9,"label",2),h.Nb(10,"vcl-radio-button",4),h.yc(11," Static "),h.Rb(),h.Sb(12,"label",2),h.Nb(13,"vcl-radio-button",5),h.yc(14," Disabled "),h.Rb(),h.Rb(),h.Rb(),h.Sb(15,"vcl-jss-form",6,7),h.ac("formSubmit",(function(){return a.onSubmit()}))("formAction",(function(s){return a.onAction(s)})),h.Rb(),h.wc(17,k,6,3,"div",8),h.ec(18,"async")),2&s&&(h.Ab(5),h.ic("value",a.material),h.Ab(10),h.ic("schema",a.heroSchema),h.Ab(2),h.ic("ngIf",h.fc(18,3,a.state$)))},directives:[m.a,j.a,g.a,d.a,u.a,y.a,l.t],pipes:[l.b,l.k],encapsulation:2}),s})();var f=n("f0Vy"),v=n("p31x");function F(s,a){1&s&&h.Nb(0,"vcl-required")}function C(s,a){if(1&s&&(h.Sb(0,"label",3),h.yc(1),h.wc(2,F,1,0,"vcl-required",0),h.Rb()),2&s){const s=h.dc(2);h.Ab(1),h.zc(s.field.label),h.Ab(1),h.ic("ngIf",s.field.required)}}function S(s,a){if(1&s&&(h.Sb(0,"vcl-form-control-group"),h.wc(1,C,3,2,"label",1),h.Nb(2,"demo-counter",2),h.Rb()),2&s){const s=h.dc();h.Ab(1),h.ic("ngIf",!!s.field.label),h.Ab(1),h.ic("formControl",s.field.control)("min",s.field.params.min)("max",s.field.params.max)}}function A(){return{label:"JSS-Form",tabs:{Demo:w,"README.md":{type:"md",content:'<h1 id="vcl-jss-form">vcl-jss-form</h1>\n<p>Creates a html-form from a provided schema.</p>\n<h2 id="usage">Usage</h2>\n<pre class="hljs"><span class="hljs-keyword">import</span> { VCLJssFormModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@vcl/ng-vcl&apos;</span>;\n\n<span class="hljs-meta">@NgModule</span>({\n  imports: [ VCLJssFormModule ],\n  ...\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent {}</pre>\n<pre class="hljs"><code>&lt;vcl-jss-form [schema]=&quot;mySchema&quot; (formSubmit)=&quot;onSubmit($event)&quot; (formAction)=&quot;onAction($event)&quot; &gt;&lt;/vcl-jss-form&gt;</code></pre>\n<pre class="hljs"><span class="hljs-keyword">import</span> { Validators } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/forms&apos;</span>;\n<span class="hljs-keyword">import</span> { VCLFormFieldSchemaRoot } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@vcl/ng-vcl&apos;</span>;\n\n<span class="hljs-keyword">const</span> SCHEMA: VCLFormFieldSchemaRoot = {\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;form&apos;</span>,\n  fields: {\n    name: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n      label: <span class="hljs-string">&apos;Name&apos;</span>,\n      params: {\n        placeholder: <span class="hljs-string">&apos;Your name&apos;</span>,\n      },\n      validators: [\n        Validators.required, Validators.minLength(<span class="hljs-number">2</span>)\n      ],\n      required: <span class="hljs-literal">true</span>,\n      hints: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;error&apos;</span>,\n          error: <span class="hljs-string">&apos;required&apos;</span>,\n          message: <span class="hljs-string">&apos;Name is required&apos;</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;error&apos;</span>,\n          error: <span class="hljs-string">&apos;minlength&apos;</span>,\n          message: <span class="hljs-string">&apos;Name must have a length of at least 2 characters&apos;</span>\n        }\n      ]\n    },\n    email: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n      label: <span class="hljs-string">&apos;Email&apos;</span>,\n      validators: [Validators.email],\n      required: <span class="hljs-literal">false</span>,\n      hints: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;error&apos;</span>,\n          error: <span class="hljs-string">&apos;email&apos;</span>,\n          message: <span class="hljs-string">&apos;Invalid Email address&apos;</span>\n        }\n      ]\n    },\n    gender: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;radio-group&apos;</span>,\n      label: <span class="hljs-string">&apos;Gender&apos;</span>,\n      defaultValue: <span class="hljs-string">&apos;m&apos;</span>,\n      params: {\n        options: [{\n          label: <span class="hljs-string">&apos;Male&apos;</span>,\n          value: <span class="hljs-string">&apos;m&apos;</span>\n        }, {\n          label: <span class="hljs-string">&apos;Female&apos;</span>,\n          value: <span class="hljs-string">&apos;f&apos;</span>\n        }, {\n          label: <span class="hljs-string">&apos;Genderless&apos;</span>,\n          value: <span class="hljs-string">&apos;g&apos;</span>\n        }],\n      }\n    },\n    language: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;hidden&apos;</span>,\n      defaultValue: navigator.language\n    },\n    terms: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;checkbox&apos;</span>,\n      label: <span class="hljs-string">&apos;Agree to our terms&apos;</span>,\n      validators: [<span class="hljs-function">(<span class="hljs-params">control: AbstractControl</span>) =&gt;</span> {\n        <span class="hljs-keyword">if</span> (!control.value) {\n          <span class="hljs-keyword">return</span> {\n            termsDisagree: <span class="hljs-literal">true</span>,\n          };\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n      }],\n      hints: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;default&apos;</span>,\n          message: <span class="hljs-string">&apos;Read the terms to learn how we collect, use and share your data&apos;</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;error&apos;</span>,\n          error: <span class="hljs-string">&apos;termsDisagree&apos;</span>,\n          message: <span class="hljs-string">&apos;You must agree to our Terms&apos;</span>\n        }\n      ]\n    },\n    submit: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;buttons&apos;</span>,\n      buttons: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;submit&apos;</span>,\n          label: <span class="hljs-string">&apos;Submit&apos;</span>,\n          <span class="hljs-keyword">class</span>: <span class="hljs-string">&apos;emphasized&apos;</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;button&apos;</span>,\n          label: <span class="hljs-string">&apos;Reset&apos;</span>,\n          action: <span class="hljs-string">&apos;reset&apos;</span>\n        }\n      ]\n    }\n  },\n};</pre>\n<h4 id="conditional-properties">Conditional properties</h4>\n<p>Some properties can be conditional and change when another field value changes.</p>\n<pre class="hljs"><span class="hljs-keyword">import</span> { VCLFormFieldSchemaRoot, conditional } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@vcl/ng-vcl&apos;</span>;\n\n<span class="hljs-keyword">const</span> SCHEMA: VCLFormFieldSchemaRoot = {\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;form&apos;</span>,\n  fields: {\n    one: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;checkbox&apos;</span>,\n      label: <span class="hljs-string">&apos;One&apos;</span>\n    },\n    two: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;checkbox&apos;</span>,\n      visible: conditional([<span class="hljs-string">&apos;one&apos;</span>, <span class="hljs-function">(<span class="hljs-params">one</span>) =&gt;</span> !!one.value])\n      label: <span class="hljs-string">&apos;Two&apos;</span>,\n    }\n  }\n}</pre>\n<h4 id="custom-fields">Custom fields</h4>\n<p>A component used in a custom field must implement the <code>ControlValueAccessor</code> interface to support the <code>formControl</code> directive.</p>\n<pre class="hljs"><span class="hljs-meta">@Component</span>({\n  template: <span class="hljs-string">`\n    &lt;span *ngIf=&quot;field.label&quot;&gt;{{ field.label }}&lt;/span&gt;&lt;br&gt;\n    &lt;my-counter [formControl]=&quot;field.control&quot; [max]=&quot;field.params.max&quot;&gt;&lt;/my-counter&gt;\n    `</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> CounterFormFieldComponent {\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> field: FormFieldControl</span>) { }\n}\n\nFormFieldControl.register(<span class="hljs-string">&apos;counter&apos;</span>, CounterFormFieldComponent);</pre>\n<pre class="hljs"><span class="hljs-keyword">import</span> { VCLFormFieldSchemaRoot, conditional } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@vcl/ng-vcl&apos;</span>;\n\n<span class="hljs-keyword">const</span> SCHEMA: VCLFormFieldSchemaRoot = {\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;form&apos;</span>,\n  fields: {\n    level: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;counter&apos;</span>,\n      label: <span class="hljs-string">&apos;Counter&apos;</span>,\n      params: {\n        max: <span class="hljs-number">10</span>\n      }\n    }\n  }\n}</pre>\n'},"demo.component.html":{type:"pre",content:n("NuEv")},"demo.component.ts":{type:"pre",content:n("LI+a")},"jss-form-extended.ts":{type:"pre",content:n("DCY7")},"hero.ts":{type:"pre",content:n("cwE8")}}}}r.j.register("counter",(()=>{class s{constructor(s){this.field=s}}return s.\u0275fac=function(a){return new(a||s)(h.Mb(r.j))},s.\u0275cmp=h.Gb({type:s,selectors:[["ng-component"]],decls:1,vars:1,consts:[[4,"ngIf"],["vclFormControlLabel","",4,"ngIf"],[3,"formControl","min","max"],["vclFormControlLabel",""]],template:function(s,a){1&s&&h.wc(0,S,3,4,"vcl-form-control-group",0),2&s&&h.ic("ngIf",a.field.visible)},directives:[l.t,m.a,f.a,e.r,e.h,j.a,v.a],encapsulation:2}),s})());let q=(()=>{class s{}return s.\u0275mod=h.Kb({type:s}),s.\u0275inj=h.Jb({factory:function(a){return new(a||s)},imports:[[l.c,e.m,e.B,t.b,f.b,r.P,r.C,r.N,r.cb,r.S,r.X,p.g.forChild([{path:"",component:t.a,data:{demo:A}}])]]}),s})()},"LI+a":function(s,a){s.exports='<span class="hljs-keyword">import</span> { Component, ViewChild, AfterViewInit, OnInit } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { JssFormComponent, NotifierService, MaterialMode } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@vcl/ng-vcl\'</span>;\n<span class="hljs-keyword">import</span> { merge, Observable } <span class="hljs-keyword">from</span> <span class="hljs-string">\'rxjs\'</span>;\n<span class="hljs-keyword">import</span> { map } <span class="hljs-keyword">from</span> <span class="hljs-string">\'rxjs/operators\'</span>;\n<span class="hljs-keyword">import</span> { HERO_SCHEMA, ExtendedFormFieldSchemaRoot } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./hero\'</span>;\n\n\n<span class="hljs-meta">@Component</span>({\n  templateUrl: <span class="hljs-string">\'demo.component.html\'</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> JssFormDemoComponent <span class="hljs-keyword">implements</span> AfterViewInit, OnInit {\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> notifier: NotifierService</span>) { }\n\n  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">\'heroForm\'</span>)\n  heroForm: JssFormComponent;\n\n  material: MaterialMode = <span class="hljs-string">\'disabled\'</span>;\n  heroSchema?: ExtendedFormFieldSchemaRoot;\n\n  state$: Observable&lt;<span class="hljs-built_in">any</span>&gt;;\n\n  ngOnInit(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">this</span>.heroSchema = {\n      ...HERO_SCHEMA,\n      material: <span class="hljs-keyword">this</span>.material\n    }\n  }\n\n  setMaterial(material: MaterialMode) {\n    <span class="hljs-keyword">this</span>.material = material;\n    <span class="hljs-keyword">this</span>.heroSchema = {\n      ...HERO_SCHEMA,\n      material: <span class="hljs-keyword">this</span>.material\n    }\n  }\n\n  onSubmit() {\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.heroForm.ngForm.valid) {\n      <span class="hljs-keyword">this</span>.notifier.success(<span class="hljs-string">\'Hero created\'</span>);\n    } <span class="hljs-keyword">else</span> {\n     <span class="hljs-keyword">this</span>.notifier.error(<span class="hljs-string">\'Hero invalid\'</span>);\n    }\n  }\n\n  onAction(action: <span class="hljs-built_in">string</span>) {\n    <span class="hljs-keyword">if</span> (action === <span class="hljs-string">\'reset\'</span> &amp;&amp; <span class="hljs-keyword">this</span>.heroForm.ngForm) {\n      <span class="hljs-keyword">this</span>.heroForm.ngForm.resetForm(<span class="hljs-keyword">this</span>.heroForm.field.defaultValue);\n      <span class="hljs-keyword">this</span>.notifier.info(<span class="hljs-string">\'Hero reset\'</span>);\n    }\n  }\n\n  ngAfterViewInit() {\n    <span class="hljs-keyword">this</span>.state$ = merge(<span class="hljs-keyword">this</span>.heroForm.ngForm.statusChanges, <span class="hljs-keyword">this</span>.heroForm.ngForm.valueChanges, <span class="hljs-keyword">this</span>.heroForm.ngForm.ngSubmit).pipe(\n      map(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n        <span class="hljs-keyword">return</span> {\n          status: <span class="hljs-keyword">this</span>.heroForm.ngForm.status,\n          valid: <span class="hljs-keyword">this</span>.heroForm.ngForm.valid,\n          dirty: <span class="hljs-keyword">this</span>.heroForm.ngForm.dirty,\n          submitted: <span class="hljs-keyword">this</span>.heroForm.ngForm.submitted,\n          touched: <span class="hljs-keyword">this</span>.heroForm.ngForm.touched,\n          pristine: <span class="hljs-keyword">this</span>.heroForm.ngForm.pristine,\n          errors: <span class="hljs-keyword">this</span>.heroForm.ngForm.errors,\n          value: <span class="hljs-keyword">this</span>.heroForm.ngForm.value,\n        };\n      })\n    );\n  }\n}\n'},NuEv:function(s,a){s.exports='<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Create a hero<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">vcl-form-control-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">vclFormControlLabel</span>&gt;</span>Material input mode<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">vcl-radio-group</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"material"</span> (<span class="hljs-attr">valueChange</span>)=<span class="hljs-string">"setMaterial($event)"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">vclRadioButtonLabel</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">vcl-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"float"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">vcl-radio-button</span>&gt;</span>\n      Float\n    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">vclRadioButtonLabel</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">vcl-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"static"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">vcl-radio-button</span>&gt;</span>\n      Static\n    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">vclRadioButtonLabel</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">vcl-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"disabled"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">vcl-radio-button</span>&gt;</span>\n      Disabled\n    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">vcl-radio-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">vcl-form-control-group</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">vcl-jss-form</span> \n  #<span class="hljs-attr">heroForm</span>=<span class="hljs-string">"vclJssForm"</span>\n  [<span class="hljs-attr">schema</span>]=<span class="hljs-string">"heroSchema"</span> \n  (<span class="hljs-attr">formSubmit</span>)=<span class="hljs-string">"onSubmit()"</span> \n  (<span class="hljs-attr">formAction</span>)=<span class="hljs-string">"onAction($event)"</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">vcl-jss-form</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"value"</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"state$ | async as formState"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Form<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>{{formState | json}}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n'},cwE8:function(s,a){s.exports='<span class="hljs-keyword">import</span> { Validators, AbstractControl } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { conditional, VCLFormFieldSchemaRoot } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@vcl/ng-vcl\'</span>;\n<span class="hljs-keyword">import</span> { CounterSchema } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./jss-form-extended\'</span>;\n\n<span class="hljs-comment">// Extended schema including the custom counter component</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> ExtendedFormFieldSchemaRoot = VCLFormFieldSchemaRoot&lt;CounterSchema&gt;;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> HERO_SCHEMA: ExtendedFormFieldSchemaRoot = {\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">\'form\'</span>,\n  fields: [\n    {\n      name: <span class="hljs-string">\'name\'</span>,\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'input\'</span>,\n      label: <span class="hljs-string">\'Name\'</span>,\n      params: {\n        placeholder: <span class="hljs-string">\'The hero\\\'s name\'</span>\n      },\n      validators: [\n        Validators.required, Validators.minLength(<span class="hljs-number">2</span>)\n      ],\n      required: <span class="hljs-literal">true</span>,\n      hints: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'required\'</span>,\n          message: <span class="hljs-string">\'Name is required\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'minlength\'</span>,\n          message: <span class="hljs-string">\'Name must have a length of at least 2 characters\'</span>\n        }\n      ]\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'textarea\'</span>,\n      name: <span class="hljs-string">\'description\'</span>,\n      label: <span class="hljs-string">\'Description\'</span>,\n      params: {\n        placeholder: <span class="hljs-string">\'The hero\\\'s Description\'</span>,\n      }\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'datepicker\'</span>,\n      name: <span class="hljs-string">\'dob\'</span>,\n      label: <span class="hljs-string">\'Date of Birth\'</span>,\n      params: {\n        placeholder: <span class="hljs-string">\'MM/DD/YYYY\'</span>\n      }\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'password-input\'</span>,\n      name: <span class="hljs-string">\'password\'</span>,\n      label: <span class="hljs-string">\'Password\'</span>,\n      params: {\n        placeholder: <span class="hljs-string">\'Enter password\'</span>,\n      },\n      validators: [\n        Validators.required,\n        Validators.pattern(<span class="hljs-string">\'(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&amp;])[A-Za-z\\d$@$!%*?&amp;].{8,}\'</span>),\n      ],\n      hints: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'required\'</span>,\n          message: <span class="hljs-string">\'Password is required\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'pattern\'</span>,\n          message: <span class="hljs-string">\'Password must...\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'pattern\'</span>,\n          message: <span class="hljs-string">\'- At least 8 characters in length\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'pattern\'</span>,\n          message: <span class="hljs-string">\'- Contain a lowercase letters\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'pattern\'</span>,\n          message: <span class="hljs-string">\'- Contain a uppercase letters\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'pattern\'</span>,\n          message: <span class="hljs-string">\'- Contain a number\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'pattern\'</span>,\n          message: <span class="hljs-string">\'- Contain a special character\'</span>\n        }\n      ]\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'counter\'</span>,\n      name: <span class="hljs-string">\'level\'</span>,\n      label: <span class="hljs-string">\'Level\'</span>,\n      defaultValue: <span class="hljs-number">1</span>,\n      params: {\n        min: <span class="hljs-number">1</span>,\n        max: <span class="hljs-number">10</span>\n      }\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'switch\'</span>,\n      name: <span class="hljs-string">\'leader\'</span>,\n      label: <span class="hljs-string">\'Leader\'</span>,\n      defaultValue: <span class="hljs-literal">false</span>,\n      visible: conditional([<span class="hljs-string">\'level\'</span>], <span class="hljs-function">(<span class="hljs-params">level: AbstractControl</span>) =&gt;</span> level.value &gt;= <span class="hljs-number">5</span>),\n      validators: [<span class="hljs-function">(<span class="hljs-params">control: AbstractControl</span>) =&gt;</span> {\n        <span class="hljs-keyword">if</span> (!control.value) {\n          <span class="hljs-keyword">return</span> {\n            leader: <span class="hljs-literal">true</span>,\n          };\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n      }],\n      params: {\n        offLabel: <span class="hljs-string">\'No\'</span>,\n        onLabel: <span class="hljs-string">\'Yes\'</span>,\n      }\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'file-input\'</span>,\n      name: <span class="hljs-string">\'picture\'</span>,\n      label: <span class="hljs-string">\'Picture\'</span>,\n      params: {\n        multiple: <span class="hljs-literal">false</span>,\n        placeholder: <span class="hljs-string">\'Picture of the hero\'</span>\n      }\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'input\'</span>,\n      name: <span class="hljs-string">\'email\'</span>,\n      label: <span class="hljs-string">\'Email\'</span>,\n      validators: [Validators.required, Validators.email],\n      required: <span class="hljs-literal">true</span>,\n      hints: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'required\'</span>,\n          message: <span class="hljs-string">\'Email is required\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'email\'</span>,\n          message: <span class="hljs-string">\'Invalid Email address\'</span>\n        }\n      ]\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'radio-group\'</span>,\n      name: <span class="hljs-string">\'gender\'</span>,\n      label: <span class="hljs-string">\'Gender\'</span>,\n      defaultValue: <span class="hljs-string">\'m\'</span>,\n      params: {\n        options: [{\n          label: <span class="hljs-string">\'Male\'</span>,\n          value: <span class="hljs-string">\'m\'</span>\n        }, {\n          label: <span class="hljs-string">\'Female\'</span>,\n          value: <span class="hljs-string">\'f\'</span>\n        }, {\n          label: <span class="hljs-string">\'Genderless\'</span>,\n          value: <span class="hljs-string">\'g\'</span>\n        }],\n      }\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'button-group\'</span>,\n      name: <span class="hljs-string">\'alignment\'</span>,\n      label: <span class="hljs-string">\'Alignment\'</span>,\n      params: {\n        options: [{\n          label: <span class="hljs-string">\'Good\'</span>,\n          value: <span class="hljs-number">1</span>\n        }, {\n          label: <span class="hljs-string">\'Neutral\'</span>,\n          value: <span class="hljs-number">0</span>\n        }, {\n          label: <span class="hljs-string">\'Evil\'</span>,\n          value: <span class="hljs-number">-1</span>\n        }]\n      }\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'hidden\'</span>,\n      name: <span class="hljs-string">\'language\'</span>,\n      defaultValue: navigator.language\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'select-list\'</span>,\n      name: <span class="hljs-string">\'class\'</span>,\n      label: <span class="hljs-string">\'Class\'</span>,\n      defaultValue: <span class="hljs-literal">null</span>,\n      params: {\n        options: [{\n          label: <span class="hljs-string">\'Warrior\'</span>,\n          value: <span class="hljs-string">\'warrior\'</span>\n        }, {\n          label: <span class="hljs-string">\'Mage\'</span>,\n          value: <span class="hljs-string">\'mage\'</span>\n        }, {\n          label: <span class="hljs-string">\'Rogue\'</span>,\n          value: <span class="hljs-string">\'rogue\'</span>\n        }]\n      }\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'slider\'</span>,\n      name: <span class="hljs-string">\'hitpoints\'</span>,\n      label: <span class="hljs-string">\'Hit Points\'</span>,\n      defaultValue: <span class="hljs-number">15</span>,\n      disabled: conditional([<span class="hljs-string">\'class\'</span>], <span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> !c.value),\n      params: conditional([<span class="hljs-string">\'class\'</span>], <span class="hljs-function">(<span class="hljs-params">control</span>) =&gt;</span> {\n        <span class="hljs-keyword">if</span> (control.value === <span class="hljs-string">\'rogue\'</span>) {\n          <span class="hljs-keyword">return</span> {\n            min: <span class="hljs-number">8</span>,\n            max: <span class="hljs-number">18</span>,\n            scale: <span class="hljs-number">11</span>,\n            lock: <span class="hljs-literal">true</span>,\n          };\n        }  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (control.value === <span class="hljs-string">\'mage\'</span>) {\n          <span class="hljs-keyword">return</span> {\n            min: <span class="hljs-number">5</span>,\n            max: <span class="hljs-number">15</span>,\n            scale: <span class="hljs-number">11</span>,\n            lock: <span class="hljs-literal">true</span>,\n          };\n        } <span class="hljs-keyword">else</span> {\n          <span class="hljs-keyword">return</span> {\n            min: <span class="hljs-number">10</span>,\n            max: <span class="hljs-number">20</span>,\n            scale: <span class="hljs-number">11</span>,\n            lock: <span class="hljs-literal">true</span>,\n          };\n        }\n      }),\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'object\'</span>,\n      name: <span class="hljs-string">\'skills\'</span>,\n      layout: <span class="hljs-string">\'fieldset\'</span>,\n      label: <span class="hljs-string">\'Skills\'</span>,\n      fields: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'rating\'</span>,\n          name: <span class="hljs-string">\'strength\'</span>,\n          defaultValue: <span class="hljs-number">3</span>,\n          params: {\n            items: [<span class="hljs-string">\'1\'</span>, <span class="hljs-string">\'2\'</span>, <span class="hljs-string">\'3\'</span>, <span class="hljs-string">\'4\'</span>, <span class="hljs-string">\'5\'</span>],\n            valueLabel: <span class="hljs-function">(<span class="hljs-params">label</span>) =&gt;</span> <span class="hljs-string">`Strength (<span class="hljs-subst">${label}</span>)`</span>,\n          },\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'rating\'</span>,\n          name: <span class="hljs-string">\'agility\'</span>,\n          defaultValue: <span class="hljs-number">3</span>,\n          params: {\n            items: [<span class="hljs-string">\'1\'</span>, <span class="hljs-string">\'2\'</span>, <span class="hljs-string">\'3\'</span>, <span class="hljs-string">\'4\'</span>, <span class="hljs-string">\'5\'</span>],\n            valueLabel: <span class="hljs-function">(<span class="hljs-params">label</span>) =&gt;</span> <span class="hljs-string">`Agility (<span class="hljs-subst">${label}</span>)`</span>,\n          },\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'rating\'</span>,\n          name: <span class="hljs-string">\'intelligence\'</span>,\n          defaultValue: <span class="hljs-number">3</span>,\n          params: {\n            items: [<span class="hljs-string">\'1\'</span>, <span class="hljs-string">\'2\'</span>, <span class="hljs-string">\'3\'</span>, <span class="hljs-string">\'4\'</span>, <span class="hljs-string">\'5\'</span>],\n            valueLabel: <span class="hljs-function">(<span class="hljs-params">label</span>) =&gt;</span> <span class="hljs-string">`Intelligence (<span class="hljs-subst">${label}</span>)`</span>,\n          },\n        },\n      ],\n      validators: [<span class="hljs-function">(<span class="hljs-params">control: AbstractControl</span>) =&gt;</span> {\n        <span class="hljs-keyword">const</span> s = control.get(<span class="hljs-string">\'strength\'</span>);\n        <span class="hljs-keyword">const</span> a = control.get(<span class="hljs-string">\'agility\'</span>);\n        <span class="hljs-keyword">const</span> i = control.get(<span class="hljs-string">\'intelligence\'</span>);\n        <span class="hljs-keyword">const</span> skillPoints = (s &amp;&amp; a &amp;&amp; i) ? (s.value + a.value + i.value) : <span class="hljs-number">0</span>;\n        <span class="hljs-keyword">return</span> skillPoints &gt; <span class="hljs-number">10</span> ? { skills: <span class="hljs-literal">true</span> } : <span class="hljs-literal">null</span>;\n      }],\n      hints: [\n        conditional([<span class="hljs-string">\'skills\'</span>, <span class="hljs-string">\'skills.strength\'</span>, <span class="hljs-string">\'skills.agility\'</span>, <span class="hljs-string">\'skills.intelligence\'</span>], <span class="hljs-function">(<span class="hljs-params">control, s, a, i</span>) =&gt;</span> {\n          <span class="hljs-keyword">const</span> skillPoints = (s &amp;&amp; a &amp;&amp; i) ? (s.value + a.value + i.value) : <span class="hljs-number">0</span>;\n          <span class="hljs-keyword">const</span> message = <span class="hljs-string">`<span class="hljs-subst">${skillPoints}</span> of 10 skill points used`</span>;\n          <span class="hljs-keyword">if</span> (control.hasError(<span class="hljs-string">\'skills\'</span>)) {\n            <span class="hljs-keyword">return</span> {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n              message\n            };\n          } <span class="hljs-keyword">else</span> {\n            <span class="hljs-keyword">const</span> skillPointsAvailable = <span class="hljs-number">10</span> - skillPoints;\n            <span class="hljs-keyword">if</span> (skillPointsAvailable &gt; <span class="hljs-number">0</span>) {\n              <span class="hljs-keyword">return</span> {\n                <span class="hljs-keyword">type</span>: <span class="hljs-string">\'warning\'</span>,\n                message\n              };\n            }\n            <span class="hljs-keyword">return</span> {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'default\'</span>,\n              message\n            };\n          }\n        })\n      ]\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'token\'</span>,\n      name: <span class="hljs-string">\'attributes\'</span>,\n      label: <span class="hljs-string">\'Attributes\'</span>,\n      hints: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'default\'</span>,\n          message: <span class="hljs-string">\'Attributes\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'minLength\'</span>,\n          message: <span class="hljs-string">\'Minimum length is 2\'</span>\n        },\n      ],\n      validators: [<span class="hljs-function">(<span class="hljs-params">control: AbstractControl</span>) =&gt;</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.isArray(control.value) &amp;&amp; control.value.length &gt; <span class="hljs-number">1</span> ? <span class="hljs-literal">null</span> : { minLength: <span class="hljs-literal">true</span> };\n      }],\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'select\'</span>,\n      name: <span class="hljs-string">\'perks\'</span>,\n      label: <span class="hljs-string">\'Perks\'</span>,\n      params: {\n        placeholder: <span class="hljs-string">\'Select perks\'</span>,\n        selectionMode: <span class="hljs-string">\'multiple\'</span>,\n        options: [{\n          label: <span class="hljs-string">\'Snake Eater\'</span>,\n          sublabel: <span class="hljs-string">\'It gives you a 25% increase to your poison resistance.\'</span>,\n          value: <span class="hljs-string">\'snakeeater\'</span>\n        },\n        {\n          label: <span class="hljs-string">\'Swift Learner\'</span>,\n          sublabel: <span class="hljs-string">\'Swift Learner\tWhenever you gain experience, you\\\'ll receive 5% more experience per level of the perk.\'</span>,\n          value: <span class="hljs-string">\'swiftlearner\'</span>,\n        },\n        {\n          label: <span class="hljs-string">\'Toughness\'</span>,\n          sublabel: <span class="hljs-string">\'It adds 10% to your general damage resistance per level.\'</span>,\n          value: <span class="hljs-string">\'toughness\'</span>\n        },\n        {\n          label: <span class="hljs-string">\'Explorer\'</span>,\n          sublabel: <span class="hljs-string">\'You\\\'ll get more random encounters with this perk.\'</span>,\n          value: <span class="hljs-string">\'explorer\'</span>\n        }],\n      },\n      validators: [\n        <span class="hljs-function">(<span class="hljs-params">ctrl: AbstractControl</span>) =&gt;</span> {\n          <span class="hljs-keyword">if</span> (ctrl.value &amp;&amp; <span class="hljs-built_in">Array</span>.isArray(ctrl.value) &amp;&amp; ctrl.value.length === <span class="hljs-number">2</span>) {\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n          }\n          <span class="hljs-keyword">return</span> {\n            perks: <span class="hljs-literal">true</span>\n          };\n        }\n      ],\n      hints: [{\n        <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n        error: <span class="hljs-string">\'perks\'</span>,\n        message: <span class="hljs-string">\'You must select two perks\'</span>\n      }],\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'array\'</span>,\n      name: <span class="hljs-string">\'items\'</span>,\n      label: <span class="hljs-string">\'Items\'</span>,\n      initialFields: <span class="hljs-number">0</span>,\n      fieldLabel: <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> <span class="hljs-string">\'Item \'</span> + (index + <span class="hljs-number">1</span>),\n      noFieldsLabel: <span class="hljs-string">\'No items\'</span>,\n      field: {\n        <span class="hljs-keyword">type</span>: <span class="hljs-string">\'object\'</span>,\n        name: <span class="hljs-string">\'item_object\'</span>,\n        fields: [\n          {\n            <span class="hljs-keyword">type</span>: <span class="hljs-string">\'input\'</span>,\n            name: <span class="hljs-string">\'item_name\'</span>,\n            label: <span class="hljs-string">\'Name\'</span>,\n            validators: [ Validators.required],\n            required: <span class="hljs-literal">true</span>,\n            hints: [\n              {\n                <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n                error: <span class="hljs-string">\'required\'</span>,\n                message: <span class="hljs-string">\'Item name is required\'</span>\n              },\n            ]\n          },\n          {\n            <span class="hljs-keyword">type</span>: <span class="hljs-string">\'input\'</span>,\n            name: <span class="hljs-string">\'item_quantity\'</span>,\n            label: <span class="hljs-string">\'Quantity\'</span>,\n            params: {\n              inputType: <span class="hljs-string">\'number\'</span>\n            },\n            validators: [ Validators.required, Validators.min(<span class="hljs-number">1</span>), Validators.max(<span class="hljs-number">10</span>)],\n            required: <span class="hljs-literal">true</span>,\n            hints: [\n              {\n                <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n                error: <span class="hljs-string">\'required\'</span>,\n                message: <span class="hljs-string">\'Item quantity is required\'</span>\n              },\n              {\n                <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n                error: <span class="hljs-string">\'min\'</span>,\n                message: <span class="hljs-string">\'Minimum is 1\'</span>\n              },\n              {\n                <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n                error: <span class="hljs-string">\'max\'</span>,\n                message: <span class="hljs-string">\'Maximum is 10\'</span>\n              },\n            ]\n          }\n        ]\n      }\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'checkbox\'</span>,\n      name: <span class="hljs-string">\'terms\'</span>,\n      label: <span class="hljs-string">\'Agree to our terms\'</span>,\n      validators: [<span class="hljs-function">(<span class="hljs-params">control: AbstractControl</span>) =&gt;</span> {\n        <span class="hljs-keyword">if</span> (!control.value) {\n          <span class="hljs-keyword">return</span> {\n            termsDisagree: <span class="hljs-literal">true</span>,\n          };\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n      }],\n      hints: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'default\'</span>,\n          message: <span class="hljs-string">\'Read the terms to learn how we collect, use and share your data\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'error\'</span>,\n          error: <span class="hljs-string">\'termsDisagree\'</span>,\n          message: <span class="hljs-string">\'You must agree to our Terms\'</span>\n        }\n      ],\n      errorStateAgent: <span class="hljs-function">(<span class="hljs-params">host, input</span>) =&gt;</span> input.ngControl.invalid &amp;&amp; host.submitted\n    },\n    {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'buttons\'</span>,\n      buttons: [\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'submit\'</span>,\n          label: <span class="hljs-string">\'Submit\'</span>,\n          <span class="hljs-keyword">class</span>: <span class="hljs-string">\'emphasized\'</span>,\n          appIcon: <span class="hljs-string">\'fas:arrow-circle-right\'</span>\n        },\n        {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'button\'</span>,\n          label: <span class="hljs-string">\'Reset\'</span>,\n          action: <span class="hljs-string">\'reset\'</span>\n        }\n      ]\n    }\n  ]\n};\n'}}]);