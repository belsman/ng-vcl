(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{"+eiR":function(s,n,a){"use strict";a.r(n),a.d(n,"demo",(function(){return h})),a.d(n,"NotificationDemoModule",(function(){return j}));var l=a("ofXK"),t=a("tyNb"),p=a("3Pt+"),o=a("19H1"),e=a("2FIb"),c=a("fXoL"),i=a("cjwi");let r=(()=>{class s{}return s.\u0275fac=function(n){return new(n||s)},s.\u0275cmp=c.Gb({type:s,selectors:[["ng-component"]],decls:6,vars:0,consts:[["type","success"]],template:function(s,n){1&s&&(c.Sb(0,"vcl-notification"),c.yc(1," An inline message\n"),c.Rb(),c.Sb(2,"vcl-notification",0),c.Sb(3,"vcl-notification-title"),c.yc(4,"Success"),c.Rb(),c.yc(5," An inline success message\n"),c.Rb())},directives:[i.a,i.b],encapsulation:2}),s})();function h(){return{label:"Notification",tabs:{Demo:r,"README.md":{type:"md",content:'<h1 id="vcl-notifications">vcl-notifications</h1>\n<p>Notification messages for events with growl-style support</p>\n<h2 id="usage">Usage</h2>\n<pre class="hljs"><span class="hljs-keyword">import</span> { VCLNotifierModule, VCLLayerModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@vcl/ng-vcl&apos;</span>;\n\n@NgModule({\n  <span class="hljs-attr">imports</span>: [ \n    VCLNotifierModule,\n  ],\n  ...\n})\n<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>{}</pre>\n<p>Inline</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">vcl-notification</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span> \n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">vclNotificationHeader</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n  An inline success message\n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">vclNotificationFooter</span>&gt;</span>Footer<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">vcl-notification</span>&gt;</span></pre>\n<p>Growl-style</p>\n<pre class="hljs"><span class="hljs-meta">@Component</span>({ ... })\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> MyComponent {\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> notifier: NotifierService</span>) {}\n\n  info() {\n    <span class="hljs-keyword">this</span>.notifier.queue({\n      content: <span class="hljs-string">&apos;A message&apos;</span>\n    });\n  }\n  info() {\n    <span class="hljs-keyword">this</span>.notifier.info({\n      content: <span class="hljs-string">&apos;An info message&apos;</span>\n    });\n  }\n  success() {\n    <span class="hljs-keyword">this</span>.notifier.success({\n      content: <span class="hljs-string">&apos;A success message&apos;</span>,\n      position: NotifierPosition.BottomRight\n    });\n  }\n  warning() {\n    <span class="hljs-keyword">this</span>.notifier.warning({\n      content: <span class="hljs-string">&apos;A warning&apos;</span>,\n      showCloseButton: <span class="hljs-literal">true</span>,\n      timeout: <span class="hljs-number">10000</span>\n    });\n  }\n  error() {\n    <span class="hljs-keyword">this</span>.notifier.error({\n      content: <span class="hljs-string">&apos;An error message&apos;</span>,\n      timeout: <span class="hljs-literal">false</span>,\n      icon: <span class="hljs-string">&apos;fas:warning&apos;</span>,\n      position: NotifierPosition.TopLeft,\n      <span class="hljs-keyword">class</span>: <span class="hljs-string">&apos;my-error-message&apos;</span>\n    });\n  }\n}</pre>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> [<span class="hljs-attr">vclNotification</span>[]=<span class="hljs-string">&quot;{}&quot;</span> #<span class="hljs-attr">n</span>=<span class="hljs-string">&quot;vclNotification&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;n.open()&quot;</span>&gt;</span>Show notification<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n</pre>\n<h3 id="api">API</h3>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">enum</span> NotifierType {\n  None,\n  Info,\n  Success,\n  Warning,\n  <span class="hljs-built_in">Error</span>\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">enum</span> NotifierPosition {\n  TopRight,\n  Top,\n  TopLeft,\n  BottomRight,\n  Bottom,\n  BottomLeft,\n  Center\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> NotifierOptions {\n  content?: <span class="hljs-built_in">string</span>;\n  <span class="hljs-keyword">type</span>?: NotifierType;\n  icon: <span class="hljs-built_in">string</span> | <span class="hljs-literal">false</span>;\n  showCloseButton?: <span class="hljs-built_in">boolean</span>;\n  position?: NotifierPosition;\n  timeout?: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-keyword">class</span>?: <span class="hljs-built_in">string</span>;\n  context?: <span class="hljs-built_in">any</span>;\n}</pre>\n'},"demo.component.html":{type:"pre",content:a("2nGh")},"demo.component.ts":{type:"pre",content:a("ZkaI")}}}}let j=(()=>{class s{}return s.\u0275mod=c.Kb({type:s}),s.\u0275inj=c.Jb({factory:function(n){return new(n||s)},imports:[[l.c,p.m,e.b,o.T,o.z,o.A,t.g.forChild([{path:"",component:e.a,data:{demo:h}}])]]}),s})()},"2nGh":function(s,n){s.exports='\n<span class="hljs-tag">&lt;<span class="hljs-name">vcl-notification</span>&gt;</span> \n  An inline message\n<span class="hljs-tag">&lt;/<span class="hljs-name">vcl-notification</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">vcl-notification</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span>&gt;</span> \n  <span class="hljs-tag">&lt;<span class="hljs-name">vcl-notification-title</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">vcl-notification-title</span>&gt;</span>\n  An inline success message\n<span class="hljs-tag">&lt;/<span class="hljs-name">vcl-notification</span>&gt;</span>\n\n'},ZkaI:function(s,n){s.exports='<span class="hljs-keyword">import</span> { NotifierPosition, NotifierService, NotifierOptions } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@vcl/ng-vcl\'</span>;\n<span class="hljs-keyword">import</span> { Component, Input, ViewEncapsulation, ViewChild, TemplateRef } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { TemplatePortal } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/cdk/portal\'</span>;\n\n<span class="hljs-keyword">let</span> cnt = <span class="hljs-number">1</span>;\n\n<span class="hljs-meta">@Component</span>({\n  templateUrl: <span class="hljs-string">\'demo.component.html\'</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> NotificationDemoComponent {\n\n\n}\n'}}]);