!function(){function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{NMBi:function(t,e,o){"use strict";o.r(e),e.default="import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: 'demo.component.html',\n})\nexport class PopoverDemoComponent {\n\n}\n"},QXnv:function(t,e,o){"use strict";o.r(e),e.default='<div style="min-height:500px; width: 100%;">\n  <button vcl-button [selectable]="true" [selected]="popover1.visible" (click)="popover1.toggle()">Toggle Popover</button>\n  <div #target style="position: absolute; top: 300px; left: 200px; padding: 10px; border: 3px double green">\n    The target\n  </div>\n</div>\n\n<ng-template\n  vclPopover\n  #popover1="vclPopover"\n  [target]="target"\n  (afterClose)="popover2.close()">\n  <div style="width: 400px">\n    Popover is connected to the target <br>\n    <button vcl-button (click)="popover2.open()">Show additional Popover</button>\n    &nbsp;\n    <button vcl-button (click)="popover1.close();">Close Popovers</button>\n  </div>\n</ng-template>\n\n<ng-template\n  vclPopover\n  #popover2="vclPopover"\n  [closeOnOffClick]="true"\n  [target]="target"\n  [positions]="[{\n    originX: \'start\',\n    originY: \'top\',\n    overlayX: \'start\',\n    overlayY: \'bottom\'\n  }]">\n  <div style="width: 300px; height: 50px;">\n      Popover is connected to the target<br>\n  </div>\n</ng-template>\n'},pYTx:function(e,o,n){"use strict";n.r(o),n.d(o,"demo",(function(){return m})),n.d(o,"PopoverDemoModule",(function(){return P}));var r=n("ofXK"),i=n("tyNb"),c=n("19H1"),l=n("2FIb"),p=n("fXoL"),a=n("6B8K"),s=n("7K8r");function v(t,e){if(1&t){var o=p.Rb();p.Qb(0,"div",8),p.wc(1," Popover is connected to the target "),p.Lb(2,"br"),p.Qb(3,"button",9),p.Xb("click",(function(){return p.mc(o),p.ac(),p.lc(9).open()})),p.wc(4,"Show additional Popover"),p.Pb(),p.wc(5," \xa0 "),p.Qb(6,"button",9),p.Xb("click",(function(){return p.mc(o),p.ac(),p.lc(7).close()})),p.wc(7,"Close Popovers"),p.Pb(),p.Pb()}}function b(t,e){1&t&&(p.Qb(0,"div",10),p.wc(1," Popover is connected to the target"),p.Lb(2,"br"),p.Pb())}var u,d=function(){return{originX:"start",originY:"top",overlayX:"start",overlayY:"bottom"}},g=function(t){return[t]},f=((u=function e(){t(this,e)}).\u0275fac=function(t){return new(t||u)},u.\u0275cmp=p.Eb({type:u,selectors:[["ng-component"]],decls:10,vars:9,consts:[[2,"min-height","500px","width","100%"],["vcl-button","",3,"selectable","selected","click"],[2,"position","absolute","top","300px","left","200px","padding","10px","border","3px double green"],["target",""],["vclPopover","",3,"target","afterClose"],["popover1","vclPopover"],["vclPopover","",3,"closeOnOffClick","target","positions"],["popover2","vclPopover"],[2,"width","400px"],["vcl-button","",3,"click"],[2,"width","300px","height","50px"]],template:function(t,e){if(1&t){var o=p.Rb();p.Qb(0,"div",0),p.Qb(1,"button",1),p.Xb("click",(function(){return p.mc(o),p.lc(7).toggle()})),p.wc(2,"Toggle Popover"),p.Pb(),p.Qb(3,"div",2,3),p.wc(5," The target "),p.Pb(),p.Pb(),p.uc(6,v,8,0,"ng-template",4,5,p.vc),p.Xb("afterClose",(function(){return p.mc(o),p.lc(9).close()})),p.uc(8,b,3,0,"ng-template",6,7,p.vc)}if(2&t){var n=p.lc(4),r=p.lc(7);p.yb(1),p.gc("selectable",!0)("selected",r.visible),p.yb(5),p.gc("target",n),p.yb(2),p.gc("closeOnOffClick",!0)("target",n)("positions",p.ic(7,g,p.hc(6,d)))}},directives:[a.b,s.a],encapsulation:2}),u);function m(){return{label:"Popover",tabs:{Demo:f,"README.md":{type:"md",content:'# vcl-popover\n\nA popover is an overlay floating at the position of the target element.\n\n## Usage\n\n```html\n<div #myTarget>any dom element can be the target</div>\n<button (click)="popover.toggle()"> \n\n<vcl-popover #popover="vclPopover" [target]="myTarget" [positions]="myPositions">\n  Popover-Content\n</vcl-popover>\n```\n\n### API\n\n#### Attributes\n\nName                | Type                          | Default             | Description\n------------------- | ---------------------------   | ------------------- | ------------------- \n`target`            | ElementRef \\| HTMLElement     |                     | the target must be an ElementRef instance\n`positions`         | [ConnectedPosition](https://material.angular.io/cdk/overlay/api#ConnectedPosition) | | @angular/cdk OverlayPosition array\n`scrollStrategy`    | [ScrollStrategy](https://material.angular.io/cdk/overlay/api#ScrollStrategy) | | @angular/cdk ScrollStrategy\n`closeOnOffClick`   | boolean                       | false               | Close popover when on a click outside of the popover\n`visible` _(1)_     | boolean                       | false               | the popover is hidden if false\n  \n#### Methods  \n\nName             | Attributes | Description\n------------     | ---------- | --------------------------------------------------------------------------\n`open`           |            | will show the popover\n`close`          |            | will hide the popover\n`toggle`         |            | will show when hidden and hide when visible\n\n_(1) Supports Two-way binding_\n'},"demo.component.html":{type:"html",content:n("QXnv")},"demo.component.ts":{type:"ts",content:n("NMBi")}}}}var h,P=((h=function e(){t(this,e)}).\u0275mod=p.Ib({type:h}),h.\u0275inj=p.Hb({factory:function(t){return new(t||h)},imports:[[r.c,l.b,c.VCLPopoverModule,c.VCLButtonModule,i.g.forChild([{path:"",component:l.a,data:{demo:m}}])]]}),h)}}])}();