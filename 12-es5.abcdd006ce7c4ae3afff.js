!function(){function e(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function n(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{CO1m:function(t,r,s){"use strict";s.r(r),s.d(r,"demo",function(){return h}),s.d(r,"BreakpointsDemoModule",function(){return x});var o,i=s("ofXK"),a=s("tyNb"),p=s("2FIb"),c=s("19H1"),b=s("lJxs"),m=s("fXoL"),l=s("0MNC"),v=Object(b.a)(function(e){return e.matches}),k=((o=function(){function t(n){e(this,t),this.breakpointObserver=n}var r,s,o;return r=t,(s=[{key:"ngOnInit",value:function(){this.xs$=this.breakpointObserver.observe(c.w.xs).pipe(v),this.sm$=this.breakpointObserver.observe(c.w.sm).pipe(v),this.md$=this.breakpointObserver.observe(c.w.md).pipe(v),this.lg$=this.breakpointObserver.observe(c.w.lg).pipe(v),this.xl$=this.breakpointObserver.observe(c.w.xl).pipe(v),this.xs_sm$=this.breakpointObserver.observe([c.w.xs,c.w.sm]).pipe(v)}}])&&n(r.prototype,s),o&&n(r,o),t}()).\u0275fac=function(e){return new(e||o)(m.Kb(l.a))},o.\u0275cmp=m.Eb({type:o,selectors:[["ng-component"]],decls:18,vars:18,template:function(e,n){1&e&&(m.Qb(0,"pre"),m.xc(1),m.bc(2,"async"),m.Pb(),m.Qb(3,"pre"),m.xc(4),m.bc(5,"async"),m.Pb(),m.Qb(6,"pre"),m.xc(7),m.bc(8,"async"),m.Pb(),m.Qb(9,"pre"),m.xc(10),m.bc(11,"async"),m.Pb(),m.Qb(12,"pre"),m.xc(13),m.bc(14,"async"),m.Pb(),m.Qb(15,"pre"),m.xc(16),m.bc(17,"async"),m.Pb()),2&e&&(m.zb(1),m.zc("xs: ",m.cc(2,6,n.xs$),""),m.zb(3),m.zc("sm: ",m.cc(5,8,n.sm$),""),m.zb(3),m.zc("md: ",m.cc(8,10,n.md$),""),m.zb(3),m.zc("lg: ",m.cc(11,12,n.lg$),""),m.zb(3),m.zc("xl: ",m.cc(14,14,n.xl$),""),m.zb(3),m.zc("xs_sm: ",m.cc(17,16,n.xs_sm$),""))},pipes:[i.b],encapsulation:2}),o);function h(){return{label:"Breakpoints",tabs:{Demo:k,"README.md":{type:"md",content:"# Breakpoints\n\nVCL Breakpoint queries to be used with `@angular/cdk`'s BreakpointObserver or `window.matchMedia()`\n\n### Usage\n\n```ts\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nexport class MyComponent implements OnInit {\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n  ) {}\n\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs_sm$ = this.breakpointObserver.observe([VCLBreakpoints.xs, VCLBreakpoints.sm]).pipe(\n      map(state => state.matches)\n    );\n  }\n}\n\n```\n"},"demo.component.html":{type:"html",content:s("Exr4")},"demo.component.ts":{type:"ts",content:s("lRQt")}}}}var u,x=((u=function n(){e(this,n)}).\u0275fac=function(e){return new(e||u)},u.\u0275mod=m.Ib({type:u}),u.\u0275inj=m.Hb({imports:[[i.c,p.b,a.g.forChild([{path:"",component:p.a,data:{demo:h}}])]]}),u)},Exr4:function(e,n,t){"use strict";t.r(n),n.default="<pre>xs: {{xs$ | async}}</pre>\n<pre>sm: {{sm$ | async}}</pre>\n<pre>md: {{md$ | async}}</pre>\n<pre>lg: {{lg$ | async}}</pre>\n<pre>xl: {{xl$ | async}}</pre>\n<pre>xs_sm: {{xs_sm$ | async}}</pre>\n"},lRQt:function(e,n,t){"use strict";t.r(n),n.default="import { Component } from '@angular/core';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { map } from 'rxjs/operators';\n\nconst pickMatches = map((state: BreakpointState) => state.matches);\n\n@Component({\n  templateUrl: 'demo.component.html'\n})\nexport class BreakpointsDemoComponent {\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n  ) {}\n\n  xs$: Observable<boolean>;\n  sm$: Observable<boolean>;\n  md$: Observable<boolean>;\n  lg$: Observable<boolean>;\n  xl$: Observable<boolean>;\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs$ = this.breakpointObserver.observe(VCLBreakpoints.xs).pipe(pickMatches);\n    this.sm$ = this.breakpointObserver.observe(VCLBreakpoints.sm).pipe(pickMatches);\n    this.md$ = this.breakpointObserver.observe(VCLBreakpoints.md).pipe(pickMatches);\n    this.lg$ = this.breakpointObserver.observe(VCLBreakpoints.lg).pipe(pickMatches);\n    this.xl$ = this.breakpointObserver.observe(VCLBreakpoints.xl).pipe(pickMatches);\n    this.xs_sm$ = this.breakpointObserver.observe([VCLBreakpoints.xs, VCLBreakpoints.sm]).pipe(pickMatches);\n  }\n}\n"}}])}();